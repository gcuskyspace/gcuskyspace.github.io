<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[GCUSKY_SPACE]]></title>
  <subtitle><![CDATA[GCUSKY的空间]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.gcusky.com/"/>
  <updated>2016-03-22T14:01:55.340Z</updated>
  <id>http://www.gcusky.com/</id>
  
  <author>
    <name><![CDATA[GCUSKY]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[【五十音】第2回　かきくけこ]]></title>
    <link href="http://www.gcusky.com/2016/03/22/jp-2/"/>
    <id>http://www.gcusky.com/2016/03/22/jp-2/</id>
    <published>2016-03-22T14:01:23.000Z</published>
    <updated>2016-03-22T14:01:55.340Z</updated>
    <content type="html"><![CDATA[<h3 id="u6BCD_u97F3_B7_u5B50_u97F3"><a href="#u6BCD_u97F3_B7_u5B50_u97F3" class="headerlink" title="母音·子音"></a>母音·子音</h3><p>母音：あ い う え お<br>子音：[k]音 → ka ki ku ke ko</p>
<blockquote>
<p>让后舌面跟软腭接触，阻住气流，然后很快放开，让气流冲出。不要振动声带。</p>
</blockquote>
<a id="more"></a>
<h2 id="u304B__u304D__u304F__u3051__u3053"><a href="#u304B__u304D__u304F__u3051__u3053" class="headerlink" title="か き く け こ"></a>か き く け こ</h2><p><img src="http://cloud.gcusky.com/Japanese/2-1.png?imageView2/0/h/350" alt="か"><img src="http://cloud.gcusky.com/Japanese/2-2.png?imageView2/0/h/350" alt="か"></p>
<blockquote>
<p>颜文字<br><img src="http://cloud.gcusky.com/Japanese/2-3.png" alt="颜文字" title="颜文字"></p>
</blockquote>
<p><img src="http://cloud.gcusky.com/Japanese/2-4.png?imageView2/0/h/350" alt="き"><img src="http://cloud.gcusky.com/Japanese/2-5.png?imageView2/0/h/350" alt="き"></p>
<blockquote>
<p>あき【秋】<br><img src="http://cloud.gcusky.com/Japanese/2-6.png" alt="秋"></p>
<ul>
<li>运动之秋<br>体育日：10月第二个周一</li>
<li>文化之秋<br>又叫艺术之秋，读书之秋<br>文化日：11月3日</li>
<li>食欲之秋</li>
</ul>
</blockquote>
<p><img src="http://cloud.gcusky.com/Japanese/2-7.png?imageView2/0/h/350" alt="く"><img src="http://cloud.gcusky.com/Japanese/2-8.png?imageView2/0/h/350" alt="く"></p>
<blockquote>
<p>【书道】<br><img src="http://cloud.gcusky.com/Japanese/2-9.png" alt="书道"></p>
</blockquote>
<p><img src="http://cloud.gcusky.com/Japanese/2-10.png?imageView2/0/h/350" alt="け"><img src="http://cloud.gcusky.com/Japanese/2-16.png?imageView2/0/h/350" alt="け"></p>
<blockquote>
<p>care house 老人院<br><img src="http://cloud.gcusky.com/Japanese/2-12.png" alt="老人院"></p>
</blockquote>
<p><img src="http://cloud.gcusky.com/Japanese/2-11.png?imageView2/0/h/350" alt="こ"><img src="http://cloud.gcusky.com/Japanese/2-13.png?imageView2/0/h/350" alt="こ"></p>
<blockquote>
<p><img src="http://cloud.gcusky.com/Japanese/2-14.png" alt="こ"></p>
</blockquote>
<h3 id="u7EC3_u4E00_u7EC3"><a href="#u7EC3_u4E00_u7EC3" class="headerlink" title="练一练"></a>练一练</h3><p><img src="http://cloud.gcusky.com/Japanese/2-15.png?imageView2/0/h/350" alt="かきくけこ"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6BCD_u97F3_B7_u5B50_u97F3"><a href="#u6BCD_u97F3_B7_u5B50_u97F3" class="headerlink" title="母音·子音"></a>母音·子音</h3><p>母音：あ い う え お<br>子音：[k]音 → ka ki ku ke ko</p>
<blockquote>
<p>让后舌面跟软腭接触，阻住气流，然后很快放开，让气流冲出。不要振动声带。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="五十音" scheme="http://www.gcusky.com/tags/%E4%BA%94%E5%8D%81%E9%9F%B3/"/>
    
      <category term="日语" scheme="http://www.gcusky.com/tags/%E6%97%A5%E8%AF%AD/"/>
    
      <category term="日语五十音" scheme="http://www.gcusky.com/categories/%E6%97%A5%E8%AF%AD%E4%BA%94%E5%8D%81%E9%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【五十音】第1回　あいうえお]]></title>
    <link href="http://www.gcusky.com/2016/03/22/jp-1/"/>
    <id>http://www.gcusky.com/2016/03/22/jp-1/</id>
    <published>2016-03-22T12:48:08.000Z</published>
    <updated>2016-03-22T13:42:56.854Z</updated>
    <content type="html"><![CDATA[<h3 id="u4E94_u5341_u97F3_u56FE"><a href="#u4E94_u5341_u97F3_u56FE" class="headerlink" title="五十音图"></a>五十音图</h3><p><img src="http://cloud.gcusky.com/Japanese/fifty.png" alt="五十音图"></p>
<p>五十音图五段十行，为45+45共90个（并非都是50个，因为有一些是重复的）。</p>
<a id="more"></a>
<h2 id="u3042__u3044__u3046__u3048__u304A"><a href="#u3042__u3044__u3046__u3048__u304A" class="headerlink" title="あ　い　う　え　お"></a>あ　い　う　え　お</h2><h3 id="u57FA_u7840"><a href="#u57FA_u7840" class="headerlink" title="基础"></a>基础</h3><p><img src="http://cloud.gcusky.com/Japanese/1-3.png?imageView2/0/w/500" alt="双唇自然张开，比中文的a开口略小"><br><img src="http://cloud.gcusky.com/Japanese/1-4.png?imageView2/0/w/500" alt="比发汉语的yi时双唇略松，嘴角咧开较小"><br><img src="http://cloud.gcusky.com/Japanese/1-5.png?imageView2/0/w/500" alt="双唇自然微开，双唇不要向前突出，注意不要发成汉语的wu"><br><img src="http://cloud.gcusky.com/Japanese/1-7.png?imageView2/0/w/500" alt="双唇向左右咧开，口型扁平，注意不要发成汉语的ei或ai"><br><img src="http://cloud.gcusky.com/Japanese/1-8.png?imageView2/0/w/500" alt="双唇稍微放圆，口型大小处于あ和う之间，注意不要发成汉语的ou"></p>
<h3 id="u5355_u8BCD"><a href="#u5355_u8BCD" class="headerlink" title="单词"></a>单词</h3><p><img src="http://cloud.gcusky.com/Japanese/1-6.png?imageView2/0/h/350" alt="あ い う"><img src="http://cloud.gcusky.com/Japanese/1-9.png?imageView2/0/h/350" alt="え お"></p>
<h3 id="u7EC3_u4E00_u7EC3"><a href="#u7EC3_u4E00_u7EC3" class="headerlink" title="练一练"></a>练一练</h3><p><img src="http://cloud.gcusky.com/Japanese/1-10.png?imageView2/0/h/350" alt="え お"></p>
<p><strong>建议将练一练的绕口令读熟，就差不多掌握了这五个元音</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4E94_u5341_u97F3_u56FE"><a href="#u4E94_u5341_u97F3_u56FE" class="headerlink" title="五十音图"></a>五十音图</h3><p><img src="http://cloud.gcusky.com/Japanese/fifty.png" alt="五十音图"></p>
<p>五十音图五段十行，为45+45共90个（并非都是50个，因为有一些是重复的）。</p>]]>
    
    </summary>
    
      <category term="五十音" scheme="http://www.gcusky.com/tags/%E4%BA%94%E5%8D%81%E9%9F%B3/"/>
    
      <category term="日语" scheme="http://www.gcusky.com/tags/%E6%97%A5%E8%AF%AD/"/>
    
      <category term="日语五十音" scheme="http://www.gcusky.com/categories/%E6%97%A5%E8%AF%AD%E4%BA%94%E5%8D%81%E9%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【五十音】导学课]]></title>
    <link href="http://www.gcusky.com/2016/03/22/jp/"/>
    <id>http://www.gcusky.com/2016/03/22/jp/</id>
    <published>2016-03-22T12:42:27.000Z</published>
    <updated>2016-03-22T13:42:52.865Z</updated>
    <content type="html"><![CDATA[<h3 id="u4E3A_u4EC0_u4E48_u5B66_u65E5_u8BED"><a href="#u4E3A_u4EC0_u4E48_u5B66_u65E5_u8BED" class="headerlink" title="为什么学日语"></a>为什么学日语</h3><ul>
<li>兴趣，对动漫、日剧情有独钟</li>
<li>渴望有朝一日能脱离字幕欣赏</li>
<li>能作为一种工具，在学业上有所用</li>
</ul>
<a id="more"></a>
<h3 id="u65E5_u8BED_u7684_u7279_u70B9"><a href="#u65E5_u8BED_u7684_u7279_u70B9" class="headerlink" title="日语的特点"></a>日语的特点</h3><ul>
<li>发音简单！无大小舌卷舌音，元音仅五个</li>
<li>声调简单！日语无声调，仅有高低音之分</li>
<li>读法简单！一字一音，无需拼读，无需音标</li>
</ul>
<blockquote>
<p>虽然发音简单，却流畅优美（因此喜欢日语翻唱）。</p>
</blockquote>
<ul>
<li>词汇简单！残留大量中文汉字，易于学习</li>
</ul>
<h3 id="u65E5_u8BED_u7684_u96BE_u70B9_uFF1A_u65E5_u8BED_u8BED_u6CD5"><a href="#u65E5_u8BED_u7684_u96BE_u70B9_uFF1A_u65E5_u8BED_u8BED_u6CD5" class="headerlink" title="日语的难点：日语语法"></a>日语的难点：日语语法</h3><ul>
<li>主宾谓的句子结构</li>
<li>大量使用助词</li>
<li>动词、形容词有变形变位（黏着语）</li>
<li>语法细腻，表达委婉</li>
</ul>
<h3 id="u7B80_u5355_u5B66_u4E60"><a href="#u7B80_u5355_u5B66_u4E60" class="headerlink" title="简单学习"></a>简单学习</h3><ul>
<li>假名读写</li>
<li>实用单词</li>
<li>补充知识</li>
<li>课后练习</li>
</ul>
<h3 id="u65E5_u8BED_u6784_u6210_uFF1A_u6C49_u5B57_+__u5047_u540D"><a href="#u65E5_u8BED_u6784_u6210_uFF1A_u6C49_u5B57_+__u5047_u540D" class="headerlink" title="日语构成：汉字 + 假名"></a>日语构成：汉字 + 假名</h3><h4 id="u6C49_u5B57"><a href="#u6C49_u5B57" class="headerlink" title="汉字"></a>汉字</h4><ul>
<li>中文汉字（繁体字）</li>
<li>与中文汉字稍有区别</li>
<li>日本自创的“国字”</li>
<li>汉字：名词；形容词、动词词干</li>
</ul>
<blockquote>
<p>たこ（风筝）</p>
</blockquote>
<h4 id="u5047_u540D"><a href="#u5047_u540D" class="headerlink" title="假名"></a>假名</h4><ul>
<li>日本固有的表音文字 【假：假借】</li>
</ul>
<p><strong>平假名：来源于汉字的草书，笔法圆润</strong></p>
<ul>
<li>形容词、动词词尾</li>
<li>助词、副词、助动词；无汉字或汉字难读难写的单词</li>
</ul>
<p><strong>片假名：来源于汉字的一部分，有棱有角</strong></p>
<ul>
<li>外来语；拟声、拟态词；强调</li>
</ul>
<p><img src="http://cloud.gcusky.com/Japanese/1-1.png" alt="平假名和片假名"></p>
<h4 id="u7F57_u9A6C_u5B57"><a href="#u7F57_u9A6C_u5B57" class="headerlink" title="罗马字"></a>罗马字</h4><ul>
<li>用拉丁字母标注的日语读音</li>
<li>多用于人名、地名、公司名、产品名等</li>
<li>用于日文输入法</li>
</ul>
<p><img src="http://cloud.gcusky.com/Japanese/1-2.png" alt="人名、公司名"></p>
<blockquote>
<p>学习资源：<br><a href="http://www.hjclass.com/course/search?k=%E6%96%B0%E7%89%88%E8%BD%BB%E6%9D%BE%E6%8E%8C%E6%8F%A1%E4%BA%94%E5%8D%81%E9%9F%B3&amp;source=21310323" target="_blank" rel="external">新版轻松掌握五十音</a><br><a href="http://cichang.hujiang.com/book/1512125496233202" target="_blank" rel="external">开心词场【日语五十音】</a> </p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4E3A_u4EC0_u4E48_u5B66_u65E5_u8BED"><a href="#u4E3A_u4EC0_u4E48_u5B66_u65E5_u8BED" class="headerlink" title="为什么学日语"></a>为什么学日语</h3><ul>
<li>兴趣，对动漫、日剧情有独钟</li>
<li>渴望有朝一日能脱离字幕欣赏</li>
<li>能作为一种工具，在学业上有所用</li>
</ul>]]>
    
    </summary>
    
      <category term="五十音" scheme="http://www.gcusky.com/tags/%E4%BA%94%E5%8D%81%E9%9F%B3/"/>
    
      <category term="日语" scheme="http://www.gcusky.com/tags/%E6%97%A5%E8%AF%AD/"/>
    
      <category term="日语五十音" scheme="http://www.gcusky.com/categories/%E6%97%A5%E8%AF%AD%E4%BA%94%E5%8D%81%E9%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL数据库索引问题]]></title>
    <link href="http://www.gcusky.com/2016/03/20/mysql-index/"/>
    <id>http://www.gcusky.com/2016/03/20/mysql-index/</id>
    <published>2016-03-20T13:36:40.000Z</published>
    <updated>2016-03-20T13:50:33.410Z</updated>
    <content type="html"><![CDATA[<p>　　索引是快速搜索的关键。MySQL 索引的建立对于 MySQL 的高效运行是很重要的。下面介绍建立索引的基本知识和几种常见的 MySQL 索引类型。</p>
<a id="more"></a>
<h2 id="SQL__u5EFA_u7ACB_u7D22_u5F15_u7684_u539F_u5219"><a href="#SQL__u5EFA_u7ACB_u7D22_u5F15_u7684_u539F_u5219" class="headerlink" title="SQL 建立索引的原则"></a>SQL 建立索引的原则</h2><ol>
<li>定义主键的数据列一定要建立索引。</li>
<li>定义有外键的数据列一定要建立索引。</li>
<li>对于经常查询的数据列最好建立索引。</li>
<li>对于需要在指定范围内的快速或频繁查询的数据列;</li>
<li>经常用在WHERE子句中的数据列。</li>
<li>经常出现在关键字order by、group by、distinct后面的字段，建立索引。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。</li>
<li>对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。</li>
<li>对于定义为text、image和bit的数据类型的列不要建立索引。</li>
<li>对于经常存取的列避免建立索引 </li>
<li>限制表上的索引数目。对一个存在大量更新操作的表，所建索引的数目一般不要超过3个，最多不要超过5个。索引虽说提高了访问速度，但太多索引会影响数据的更新操作。</li>
<li>对复合索引，按照字段在查询条件中出现的频度建立索引。在复合索引中，记录首先按照第一个字段排序。对于在第一个字段上取值相同的记录，系统再按照第二个字段的取值排序，以此类推。因此只有复合索引的第一个字段出现在查询条件中，该索引才可能被使用,因此将应用频度高的字段，放置在复合索引的前面，会使系统最大可能地使用此索引，发挥索引的作用。</li>
</ol>
<h2 id="u5E38_u7528_u7684_u7D22_u5F15_u65B9_u6CD5"><a href="#u5E38_u7528_u7684_u7D22_u5F15_u65B9_u6CD5" class="headerlink" title="常用的索引方法"></a>常用的索引方法</h2><h3 id="B_u6811_uFF08B-Tree__u7D22_u5F15_uFF09"><a href="#B_u6811_uFF08B-Tree__u7D22_u5F15_uFF09" class="headerlink" title="B树（B-Tree 索引）"></a>B树（B-Tree 索引）</h3><p>　　B树（B tree）是一种以树的构造管理存储位置信息的方式。在B树中每个节点（node）可以有多个子数据，从而控制树的高度。因此，即使有很多数据，也可以很快地从根部找到存放地址。<br>　　B树中除根节点外，其他节点拥有的子数据最多为 $2n$ 个，最少为 $n$ 个。</p>
<h3 id="u6563_u5217_uFF08Hash__u7D22_u5F15_uFF09"><a href="#u6563_u5217_uFF08Hash__u7D22_u5F15_uFF09" class="headerlink" title="散列（Hash 索引）"></a>散列（Hash 索引）</h3><p>　　散列（hash）是对数据键值运用散列函数，求得存储地址的方法。散列用于”=”,”IN”和”&lt;=&gt;”这样的完全一致检索时功能强劲。但是，散列不适用比较条件检索和模糊检索。</p>
<h2 id="MySQL__u9009_u62E9_u7D22_u5F15_u7684_u539F_u5219"><a href="#MySQL__u9009_u62E9_u7D22_u5F15_u7684_u539F_u5219" class="headerlink" title="MySQL 选择索引的原则"></a>MySQL 选择索引的原则</h2><h3 id="u9009_u62E9_u7D22_u5F15_u6570_u636E_u7C7B_u578B_u7684_u539F_u5219"><a href="#u9009_u62E9_u7D22_u5F15_u6570_u636E_u7C7B_u578B_u7684_u539F_u5219" class="headerlink" title="选择索引数据类型的原则"></a>选择索引数据类型的原则</h3><ol>
<li>越小的数据类型通常更好：越小的数据类型通常在磁盘、内存和CPU缓存中都需要更少的空间，处理起来更快。</li>
<li>简单的数据类型更好：整型数据比起字符，处理开销更小，因为字符串的比较更复杂。在MySQL中，应该用内置的日期和时间数据类型，而不是用字符串来存储时间；以及用整型数据类型存储IP地址。</li>
<li>尽量避免NULL：应该指定列为NOT NULL，除非你想存储NULL。在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值。</li>
</ol>
<h3 id="u9009_u62E9_u6807_u8BC6_u7B26_u7684_u539F_u5219"><a href="#u9009_u62E9_u6807_u8BC6_u7B26_u7684_u539F_u5219" class="headerlink" title="选择标识符的原则"></a>选择标识符的原则</h3><ol>
<li>整型：通常是作为标识符的最好选择，因为可以更快的处理，而且可以设置为AUTO_INCREMENT。</li>
<li>字符串：尽量避免使用字符串作为标识符，它们消耗更好的空间，处理起来也较慢。而且，通常来说，字符串都是随机的，所以它们在索引中的位置也是随机的，这会导致页面分裂、随机访问磁盘，聚簇索引分裂（对于使用聚簇索引的存储引擎）。</li>
</ol>
<blockquote>
<p>一旦选定数据类型，应该保证所有相关的表都使用相同的数据类型。</p>
</blockquote>
<h3 id="MySQL__u7D22_u5F15_u7C7B_u578B"><a href="#MySQL__u7D22_u5F15_u7C7B_u578B" class="headerlink" title="MySQL 索引类型"></a>MySQL 索引类型</h3><h4 id="u666E_u901A_u7D22_u5F15_uFF08INDEX_uFF09"><a href="#u666E_u901A_u7D22_u5F15_uFF08INDEX_uFF09" class="headerlink" title="普通索引（INDEX）"></a>普通索引（INDEX）</h4><p>　　这是最基本的索引，它没有任何限制。</p>
<h4 id="u552F_u4E00_u7D22_u5F15_uFF08UNIQUE_uFF09"><a href="#u552F_u4E00_u7D22_u5F15_uFF08UNIQUE_uFF09" class="headerlink" title="唯一索引（UNIQUE）"></a>唯一索引（UNIQUE）</h4><p>　　它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p>
<h4 id="u4E3B_u952E_u7D22_u5F15_uFF08PRIMARY_uFF09"><a href="#u4E3B_u952E_u7D22_u5F15_uFF08PRIMARY_uFF09" class="headerlink" title="主键索引（PRIMARY）"></a>主键索引（PRIMARY）</h4><p>　　它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引。</p>
<h4 id="u5168_u6587_u7D22_u5F15_uFF08FULLTEXT_uFF09"><a href="#u5168_u6587_u7D22_u5F15_uFF08FULLTEXT_uFF09" class="headerlink" title="全文索引（FULLTEXT）"></a>全文索引（FULLTEXT）</h4><p>　　用来对大表的文本域(char，varchar，text)进行索引。</p>
<blockquote>
<p><strong>其他详细资料及部分引用资料</strong><br><a href="http://www.cnblogs.com/AK2012/archive/2013/01/04/2844283.html" target="_blank" rel="external">SQL索引一步到位</a><br><a href="http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html" target="_blank" rel="external">理解MySQL——索引与优化</a><br><a href="http://www.php100.com/html/webkaifa/database/Mysql/2010/0409/4279.html" target="_blank" rel="external">MySQL索引类型一览 让MySQL高效运行起来</a><br><a href="http://www.cnblogs.com/vicenteforever/articles/1789613.html" target="_blank" rel="external">MySQL的btree索引和hash索引的区别</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　索引是快速搜索的关键。MySQL 索引的建立对于 MySQL 的高效运行是很重要的。下面介绍建立索引的基本知识和几种常见的 MySQL 索引类型。</p>]]>
    
    </summary>
    
      <category term="mysql" scheme="http://www.gcusky.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 素数环]]></title>
    <link href="http://www.gcusky.com/2016/03/18/acm-9/"/>
    <id>http://www.gcusky.com/2016/03/18/acm-9/</id>
    <published>2016-03-18T08:20:36.000Z</published>
    <updated>2016-03-18T08:29:57.632Z</updated>
    <content type="html"><![CDATA[<p>时间限制：1000 ms  |  内存限制：65535 KB  |  难度：2</p>
<p><strong>描述</strong></p>
<p>有一个整数n，把从1到n的数字无重复的排列成环，且使每相邻两个数（包括首尾）的和都为素数，称为素数环。<br>为了简便起见，我们规定每个素数环都从1开始。例如，下图就是6的一个素数环。</p>
<p><img src="http://cloud.gcusky.com/acm/PrimeRing.gif" alt="素数环" title="素数环"></p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>有多组测试数据，每组输入一个$n(0&lt;n&lt;20)，n=0$表示输入结束。</p>
<p><strong>输出</strong></p>
<p>每组第一行输出对应的Case序号，从1开始。<br>如果存在满足题意叙述的素数环，从小到大输出。<br>否则输出No Answer。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>6<br>8<br>3<br>0</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>Case 1:<br>1 4 3 2 5 6<br>1 6 5 2 3 4<br>Case 2:<br>1 2 3 8 5 6 7 4<br>1 2 5 8 3 4 7 6<br>1 4 7 6 5 8 3 2<br>1 6 7 4 3 8 5 2<br>Case 3:<br>No Answer</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=488" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=488</a></p>
<h3 id="u7B97_u6CD5_u601D_u8DEF"><a href="#u7B97_u6CD5_u601D_u8DEF" class="headerlink" title="算法思路"></a>算法思路</h3><p>这个素数环有n个位置，每个位置可以填写的整数为1~n，共n种可能，可以对每个位置从1开始进行试探，结束条件是正在试探的数满足如下条件：</p>
<ol>
<li>与已经填写到素数环中的整数不重复；</li>
<li>与前面相邻的整数之和是一个素数；</li>
<li>最后一个填写到的素数环中的整数与第一个填写的整数之和是一个素数。</li>
</ol>
<p>在填写第k个位置时，如果满足上述约束条件，则继续填写第k+1个位置；如果1~n都无法填写到第k个位置，则取消对第k个位置的填写，回溯到第k-1个位置。</p>
<h3 id="u7B97_u6CD5_u5B9E_u73B0"><a href="#u7B97_u6CD5_u5B9E_u73B0" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="u7A0B_u5E8F1_uFF08_u53EA_u6C42_u51FA_u5C40_u90E8_u89E3_uFF09"><a href="#u7A0B_u5E8F1_uFF08_u53EA_u6C42_u51FA_u5C40_u90E8_u89E3_uFF09" class="headerlink" title="程序1（只求出局部解）"></a>程序1（只求出局部解）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> *a;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Prime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//判断整数x是否为素数</span></span><br><span class="line">	<span class="keyword">int</span> i,n;</span><br><span class="line">	n = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">		<span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//判断位置k的填写是否满足约束条件 </span></span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)<span class="comment">//判断是否重复</span></span><br><span class="line">		<span class="keyword">if</span>(a[i]==a[k]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	flag = Prime(a[k]+a[k-<span class="number">1</span>]);<span class="comment">//判断相邻数之和是否为素数</span></span><br><span class="line">	<span class="keyword">if</span>(flag==<span class="number">1</span> &amp;&amp; k==n-<span class="number">1</span>)<span class="comment">//判断第一个和最后一个之和是否为素数</span></span><br><span class="line">		flag = Prime(a[k]+a[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> flag; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrimeCircle</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//填写1~n共n个整数 </span></span><br><span class="line">	<span class="keyword">int</span> i,k;</span><br><span class="line">	a = <span class="keyword">new</span> <span class="keyword">int</span>[n]; <span class="comment">//初始化数组</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) a[i] = <span class="number">0</span>;</span><br><span class="line">	a[<span class="number">0</span>] = <span class="number">1</span>; k = <span class="number">1</span>;<span class="comment">//指定第0个位置填写1</span></span><br><span class="line">	<span class="keyword">while</span>(k&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">		a[k] = a[k]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(a[k]&lt;=n)</span><br><span class="line">			<span class="keyword">if</span>(Check(k,n)==<span class="number">1</span>) <span class="keyword">break</span>;<span class="comment">//位置k可以填写整数a[k] </span></span><br><span class="line">			<span class="keyword">else</span> a[k] = a[k]+<span class="number">1</span>;<span class="comment">//试探下一个数 </span></span><br><span class="line">		<span class="keyword">if</span>(a[k]&lt;=n &amp;&amp; k==n-<span class="number">1</span>)&#123;<span class="comment">//求解完毕，输出解 </span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;(num++)&lt;&lt;<span class="string">": "</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a[k]&lt;=n &amp;&amp; k&lt;n-<span class="number">1</span>) k = k+<span class="number">1</span>;<span class="comment">//填写下一个位置</span></span><br><span class="line">		<span class="keyword">else</span> a[k--]=<span class="number">0</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		PrimeCircle(n);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>问题</strong></p>
<ol>
<li>并没有真正找到所有满足题意叙述的素数环，只是找到部分解而已。</li>
<li>要真正找到所有解，应该加入一串标记，标记1~n哪些数被用过。</li>
<li>对数组a使用了太多次的<code>new</code>和<code>delete</code>，最后可能超时。</li>
</ol>
<h4 id="u7A0B_u5E8F2_uFF08_u6B63_u786E_u7A0B_u5E8F_7E_uFF09"><a href="#u7A0B_u5E8F2_uFF08_u6B63_u786E_u7A0B_u5E8F_7E_uFF09" class="headerlink" title="程序2（正确程序~）"></a>程序2（正确程序~）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n,flag,a[21],res[21];//res用来判断是否重复使用 </span><br><span class="line"></span><br><span class="line">int Prime(int x)&#123;//判断整数x是否为素数</span><br><span class="line">	if(x==1) return 0;</span><br><span class="line">	for(int i=2; i&lt;=x/2; i++)</span><br><span class="line">		if(x%i==0) return 0;</span><br><span class="line">	return 1; </span><br><span class="line">&#125;</span><br><span class="line">void PrimeCircle(int now)&#123;</span><br><span class="line">	int i;</span><br><span class="line">	if(now==n&amp;&amp;Prime(a[n-1]+a[n]))&#123;//求解完毕，输出解</span><br><span class="line">		flag = 0;</span><br><span class="line">		for(i=0; i&lt;n; i++) cout&lt;&lt;a[i]&lt;&lt;" ";</span><br><span class="line">		cout&lt;&lt;endl; </span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		for(i=2; i&lt;=n; i++)&#123;</span><br><span class="line">			if(!res[i]&amp;&amp;Prime(i+a[now-1]))&#123;</span><br><span class="line">				res[i] = 1;</span><br><span class="line">				a[now] = i;</span><br><span class="line">				PrimeCircle(now+1);//一直递归下去，进行搜索 </span><br><span class="line">				res[i] = 0;//无论是否搜索到，后续将回溯 </span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	int num = 1;</span><br><span class="line">	while(cin&gt;&gt;n,n)&#123;</span><br><span class="line">		flag = 1;</span><br><span class="line">		a[0] = a[n] = 1;//最后一个数即为第一个数 </span><br><span class="line">		cout&lt;&lt;"Case "&lt;&lt;(num++)&lt;&lt;":"&lt;&lt;endl;</span><br><span class="line">		if((n-1)&amp;1||n==1)//(n-1)&amp;1 表示n-1与1按位相与，判断n-1是否为奇数 </span><br><span class="line">			PrimeCircle(1);</span><br><span class="line">		if(flag) cout&lt;&lt;"No Answer"&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>改进</strong></p>
<ol>
<li>加入了res用来标记判断1~n哪些被重复使用；</li>
<li>数组a固定长度，且最后一个数a[n]即为第一个数a[0]，只有这两个数重复，对后续判断有利。</li>
<li>利用位操作符可以排除奇数个数n【因为只有奇数和偶数相加才会是素数， 所以总数为奇数的素数环，不可能存在】，对解空间树再剪枝，提高效率。</li>
<li>活用递归搜索与res数组，才能找到所有的解。</li>
<li>其实20以内两两相加的素数可以直接求出来，存为一串数组，效率将更高。</li>
</ol>
<h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://item.jd.com/11214031.html" title="算法设计与分析（第2版）" target="_blank" rel="external">算法设计与分析（第2版）</a><br><a href="http://acm.nyist.net/JudgeOnline/code.php?runid=381387" title="运行号：381387——刘玉涛" target="_blank" rel="external">题目488优秀程序：运行号381387——刘玉涛</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间限制：1000 ms  |  内存限制：65535 KB  |  难度：2</p>
<p><strong>描述</strong></p>
<p>有一个整数n，把从1到n的数字无重复的排列成环，且使每相邻两个数（包括首尾）的和都为素数，称为素数环。<br>为了简便起见，我们规定每个素数环都从1开始。例如，下图就是6的一个素数环。</p>
<p><img src="http://cloud.gcusky.com/acm/PrimeRing.gif" alt="素数环" title="素数环"></p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="回溯法" scheme="http://www.gcusky.com/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
      <category term="搜索" scheme="http://www.gcusky.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 背包问题]]></title>
    <link href="http://www.gcusky.com/2016/03/16/acm-8/"/>
    <id>http://www.gcusky.com/2016/03/16/acm-8/</id>
    <published>2016-03-16T08:14:40.000Z</published>
    <updated>2016-03-18T04:05:46.725Z</updated>
    <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>现在有很多物品（它们是可以分割的），我们知道它们每个物品的单位重量的价值$v$和重量$w(1&lt;=v,w&lt;=10)$；如果给你一个背包它能容纳的重量为$m(10&lt;=m&lt;=20)$,你所要做的就是把物品装到背包里，使背包里的物品的价值总和最大。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行输入一个正整数$n(1&lt;=n&lt;=5)$,表示有n组测试数据；<br>随后有$n$测试数据，每组测试数据的第一行有两个正整数$s$，$m(1&lt;=s&lt;=10)$；$s$表示有$s$个物品。接下来的$s$行每行有两个正整数$v$，$w$。</p>
<p><strong>输出</strong></p>
<p>输出每组测试数据中背包内的物品的价值和，每次输出占一行。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>1<br>3 15<br>5 10<br>2 8<br>3 9</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>65</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=106" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=106</a></p>
<h3 id="u7A0B_u5E8F_u5B9E_u73B0"><a href="#u7A0B_u5E8F_u5B9E_u73B0" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//结构体加上sort的cmp条件,实现了对单位价值排序时,也同时排好对应的重量。</span></span><br><span class="line"><span class="keyword">struct</span> P&#123;</span><br><span class="line">	<span class="keyword">int</span> v;<span class="comment">//单位重量的价值</span></span><br><span class="line">	<span class="keyword">int</span> w;<span class="comment">//重量</span></span><br><span class="line">&#125;*a;<span class="comment">//需要多少再申请多少</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(P x, P y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.v&gt;y.v;<span class="comment">//按照价值降序排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,n,s,m,sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;m;</span><br><span class="line">		a = <span class="keyword">new</span> P[s];</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;s; i++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a[i].v&gt;&gt;a[i].w;</span><br><span class="line">		sort(a,a+s,cmp); </span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;s; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i].w&lt;=m)&#123;</span><br><span class="line">				sum = sum + a[i].v*a[i].w;</span><br><span class="line">				m = m - a[i].w;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				sum= sum + m*a[i].v;</span><br><span class="line">				<span class="keyword">break</span>;<span class="comment">//提前结束循环</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">delete</span> a;sum = <span class="number">0</span>;<span class="comment">//释放空间</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u6536_u83B7"><a href="#u6536_u83B7" class="headerlink" title="收获"></a>收获</h3><ol>
<li>这是个经典的背包问题，用贪心法就可以了。</li>
<li>也学会了用结构体加上sort的cmp条件，实现了对一组数据排序时，顺便把对应的另一组数据也排了。之前<a href="http://gcusky.com/2016/03/16/acm-7/" title="会场安排问题" target="_blank" rel="external">会场安排问题</a>还是用两组数组分别来排的Orz。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>现在有很多物品（它们是可以分割的），我们知道它们每个物品的单位重量的价值$v$和重量$w(1&lt;=v,w&lt;=10)$；如果给你一个背包它能容纳的重量为$m(10&lt;=m&lt;=20)$,你所要做的就是把物品装到背包里，使背包里的物品的价值总和最大。</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="贪心算法" scheme="http://www.gcusky.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 会场安排问题]]></title>
    <link href="http://www.gcusky.com/2016/03/16/acm-7/"/>
    <id>http://www.gcusky.com/2016/03/16/acm-7/</id>
    <published>2016-03-16T08:13:37.000Z</published>
    <updated>2016-03-18T04:05:56.340Z</updated>
    <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：4</p>
<p><strong>描述</strong></p>
<p>学校的小礼堂每天都会有许多活动，有时间这些活动的计划时间会发生冲突，需要选择出一些活动进行举办。小刘的工作就是安排学校小礼堂的活动，每个时间最多安排一个活动。现在小刘有一些活动计划的时间表，他想尽可能的安排更多的活动，请问他该如何安排。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行是一个整型数 $m(m&lt;100)$ 表示共有 $m$ 组测试数据。<br>每组测试数据的第一行是一个整数 $n(1&lt;n&lt;10000)$ 表示该测试数据共有$n$个活动。<br>随后的 $n$ 行，每行有两个正整数 $Bi$ , $Ei(0&lt;=Bi,Ei&lt;10000)$ ,分别表示第 $i$ 个活动的起始与结束时间 $(Bi&lt;=Ei)$</p>
<p><strong>输出</strong></p>
<p>对于每一组输入，输出最多能够安排的活动数量。<br>每组的输出占一行</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>2<br>1 10<br>10 11<br>3<br>1 10<br>10 11<br>11 20</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>1<br>2</p>
</blockquote>
<p><strong>提示</strong></p>
<p>注意：如果上一个活动在 $t$ 时间结束，下一个活动最早应该在 $t+1$ 时间开始</p>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=14" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=14</a></p>
<h3 id="u95EE_u9898_u601D_u8003_uFF1A_u5229_u7528_u8D2A_u5FC3_u6CD5_u6C42_u89E3_u7684_u9898_u76EE"><a href="#u95EE_u9898_u601D_u8003_uFF1A_u5229_u7528_u8D2A_u5FC3_u6CD5_u6C42_u89E3_u7684_u9898_u76EE" class="headerlink" title="问题思考：利用贪心法求解的题目"></a>问题思考：利用贪心法求解的题目</h3><p>贪心法求解活动安排问题的关键是如何选择贪心策略，使得按照一定的顺序选择相容活动，并能够安排尽量多的活动。至少有以下两种看似合理的贪心策略：</p>
<ol>
<li>最早开始时间：这样可以增大资源的利用率。</li>
<li>最早结束时间：这样可以使下一个活动尽早开始。</li>
</ol>
<p>由于活动占用资源的时间没有限制，因此，后一种贪心选择更为合理。直观上，按这种策略选择相容活动可以为未安排的活动留下尽可能多的时间，也就是说，这种贪心选择的目的是使剩余时间段极大化，以便安排尽可能多的相容活动。<br>为了在每一次贪心选择时快速查找具有最早结束时间的相容活动，可以将$n$个活动按结束时间非减序排列。这样，贪心选择时取当前活动集合中结束时间最早的活动就归结为取当前活动集合中排列在最前面的活动。</p>
<h3 id="u7B97_u6CD5_u5B9E_u73B0"><a href="#u7B97_u6CD5_u5B9E_u73B0" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *bi,*ei;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">same_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="comment">//插入排序，算法复杂度O(n2) </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> small=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[small])</span><br><span class="line">                small=j;</span><br><span class="line">        <span class="comment">//同时交换相同位置 </span></span><br><span class="line">        swap(a[small],a[i]);</span><br><span class="line">        swap(b[small],b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ActiveManage</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> f[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,count;</span><br><span class="line">	j = <span class="number">0</span>; count = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">1</span>; i&lt;n; i++)&#123;<span class="comment">// 依次考察每一个活动 </span></span><br><span class="line">		<span class="keyword">if</span>(s[i]&gt;f[j])&#123;<span class="comment">// 活动i与前一个最后结束的活动j相容 </span></span><br><span class="line">			j = i;<span class="comment">// 安排活动i，j变为目前可以安排的最后一个活动 </span></span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;<span class="comment">// 返回已安排的活动个数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		bi = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		ei = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			bi[i] = a; ei[i] = b;</span><br><span class="line">		&#125;</span><br><span class="line">		same_sort(ei,bi,n);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ActiveManage(bi,ei,n)&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">delete</span> bi,ei;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u9047_u5230_u7684_u95EE_u9898"><a href="#u9047_u5230_u7684_u95EE_u9898" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li>主要是排序问题，一开始冒泡排序直接爆时间TimeLimitExceeded，并且上面的排序还可以再优化。</li>
<li>本来打算用STL的multimap，毕竟键值对应，但不熟练语言特性算了Orz。</li>
<li>后来想用类来实现，不过要对类内数据关联排序，后面有时间再实践这里总结出的问题吧。</li>
<li>【2016-3-16更新】<a href="http://gcusky.com/2016/03/16/acm-7/" title="背包问题" target="_blank" rel="external">背包问题</a>里利用了结构体加上sort的cmp条件实现关联排序了。</li>
</ol>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blog.sina.com.cn/s/blog_59fabe0301010732.html" title="map、multimaps函数" target="_blank" rel="external">map、multimaps函数 – Canny</a><br><a href="https://segmentfault.com/a/1190000000602053" title="初探STL之关联容器" target="_blank" rel="external">初探STL之关联容器</a><br><a href="http://www.dewen.net.cn/q/10725" title="STL中的sort&#40;&#41;函数对一个数组排序要求保持对应关系" target="_blank" rel="external">STL中的sort()函数对一个数组排序要求保持对应关系</a><br><a href="http://gcusky.com/2016/03/16/acm-7/" title="背包问题" target="_blank" rel="external">算法设计与分析（第2版）</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：4</p>
<p><strong>描述</strong></p>
<p>学校的小礼堂每天都会有许多活动，有时间这些活动的计划时间会发生冲突，需要选择出一些活动进行举办。小刘的工作就是安排学校小礼堂的活动，每个时间最多安排一个活动。现在小刘有一些活动计划的时间表，他想尽可能的安排更多的活动，请问他该如何安排。</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="贪心算法" scheme="http://www.gcusky.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 阶乘之和]]></title>
    <link href="http://www.gcusky.com/2016/03/16/acm-6/"/>
    <id>http://www.gcusky.com/2016/03/16/acm-6/</id>
    <published>2016-03-16T03:15:30.000Z</published>
    <updated>2016-03-18T04:04:42.278Z</updated>
    <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>给你一个非负数整数$n$，判断$n$是不是一些数（这些数不允许重复使用，且为正数）的阶乘之和，如 $9=1!+2!+3!$ ，如果是，则输出Yes，否则输出No；</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行有一个整数 $0&lt;m&lt;100$ ,表示有$m$组测试数据；<br>每组测试数据有一个正整数 $n&lt;1000000$ ;</p>
<p><strong>输出</strong></p>
<p>如果符合条件，输出Yes，否则输出No;</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>9<br>10</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>Yes<br>No</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=91" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=91</a></p>
<h3 id="u95EE_u9898_u601D_u8DEF"><a href="#u95EE_u9898_u601D_u8DEF" class="headerlink" title="问题思路"></a>问题思路</h3><p>乍一看测试数据最大不超过1000000，好像很大的样子；其实我们把<strong>二十以内的阶乘</strong>列出：</p>
<blockquote>
<p>0！=1（0 的阶乘是存在的，且定为1；但题目只允许正数，待会用不上）<br>1！=1<br>2！=2<br>3！=6<br>4！=24<br>5！=120<br>6！=720<br>7！=5040<br>8！=40320<br>9！=362880<br>10！=3628800<br>11！=39916800<br>12！=479001600<br>13！=6227020800<br>14！=87178291200<br>15！=1307674368000<br>16！=20922789888000<br>17！=355687428096000<br>18！=6402373705728000<br>19！=121645100408832000<br>20！=2432902008176640000</p>
</blockquote>
<p>我们可以发现，随着$n$越来越大，其阶乘将呈爆炸性增长。这里只需要 $1-9$ 的阶乘就够了，想清楚了这道题就很简单……</p>
<h3 id="u7A0B_u5E8F_u5B9E_u73B0"><a href="#u7A0B_u5E8F_u5B9E_u73B0" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,i,F[<span class="number">9</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">120</span>,<span class="number">720</span>,<span class="number">5040</span>,<span class="number">40320</span>,<span class="number">362880</span>&#125;;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">8</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(n-F[i]&gt;=<span class="number">0</span>) n = n - F[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(n==<span class="number">0</span>?<span class="string">"Yes"</span>:<span class="string">"No"</span>)&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>给你一个非负数整数$n$，判断$n$是不是一些数（这些数不允许重复使用，且为正数）的阶乘之和，如 $9=1!+2!+3!$ ，如果是，则输出Yes，否则输出No；</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="贪心算法" scheme="http://www.gcusky.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 过河问题]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-5/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-5/</id>
    <published>2016-03-15T12:26:19.000Z</published>
    <updated>2016-03-18T04:04:05.113Z</updated>
    <content type="html"><![CDATA[<p>时间限制：1000 ms  |  内存限制：65535 KB  |  难度：5</p>
<p><strong>描述</strong></p>
<p>在漆黑的夜里，$N$位旅行者来到了一座狭窄而且没有护栏的桥边。如果不借助手电筒的话，大家是无论如何也不敢过桥去的。不幸的是，$N$个人一共只带了一只手电筒，而桥窄得只够让两个人同时过。如果各自单独过桥的话，$N$人所需要的时间已知；而如果两人同时过桥，所需要的时间就是走得比较慢的那个人单独行动时所需的时间。问题是，如何设计一个方案，让这$N$人尽快过桥。 </p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行是一个整数 $T(1&lt;=T&lt;=20)$ 表示测试数据的组数<br>每组测试数据的第一行是一个整数 $N(1&lt;=N&lt;=1000)$ 表示共有 $N$ 个人要过河<br>每组测试数据的第二行是 $N$ 个整数 $Si$ ,表示此人过河所需要花时间。$(0&lt;Si&lt;=100)$</p>
<p><strong>输出</strong></p>
<p>输出所有人都过河需要用的最少时间</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>1<br>4<br>1 2 5 10</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>17</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=47" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=47</a></p>
<blockquote>
<p><strong>例子思路</strong>：1和2过去1回来，时间为2+1=3；5和10过去2回来，时间为3+10+2=15； 1和2再一起过去，时间为15+2=17。</p>
</blockquote>
<h3 id="u95EE_u9898_u601D_u8DEF"><a href="#u95EE_u9898_u601D_u8DEF" class="headerlink" title="问题思路"></a>问题思路</h3><p>首先对输入的数组进行排序。<code>sort(Si,Si+N)</code></p>
<p><strong>当人数大于等于4的时候</strong></p>
<ol>
<li>一开始只用了例子里面的方法，$Si[0]$和$Si[1]$过去，$Si[0]$回来，$Si[1]$留在对岸；$Si[n-1]$和$Si[n-2]$过去，$Si[1]$回来，$Si[n-1]$,$Si[n-2]$留在对岸；这样过去了两个人，所用时间为$Si[1]+Si[0]+Si[n-1]+Si[1]$。</li>
<li>其实还有另一种情况：$Si[0]$和$Si[n-1]$过去，$Si[0]$回来,$Si[n-1]$留在对岸；$Si[0]$和$Si[n-2]$过去，$Si[0]$回来,$Si[n-2]$,$Si[n-1]$留在对面；所用时间为$Si[n-1]+Si[0]+Si[n-2]+Si[0]$。</li>
</ol>
<p><strong>当人数为3的时候</strong></p>
<ul>
<li>$Si[1]+Si[0]+Si[2]$</li>
</ul>
<p><strong>当人数为2的时候</strong></p>
<ul>
<li>$Si[1]$</li>
</ul>
<p><strong>当人数为1的时候</strong></p>
<ul>
<li>$Si[0]$</li>
</ul>
<h3 id="u7A0B_u5E8F_u5B9E_u73B0"><a href="#u7A0B_u5E8F_u5B9E_u73B0" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T,N,i,sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> *Si;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">		Si = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;Si[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sort(Si,Si+N);</span><br><span class="line">		<span class="keyword">while</span>(N&gt;=<span class="number">4</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(Si[<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N-<span class="number">1</span>]+Si[<span class="number">1</span>] &lt; Si[N-<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N-<span class="number">2</span>]+Si[<span class="number">0</span>])</span><br><span class="line">				sum = sum + Si[<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N-<span class="number">1</span>]+Si[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				sum = sum + Si[N-<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N-<span class="number">2</span>]+Si[<span class="number">0</span>];</span><br><span class="line">			N = N-<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(N == <span class="number">3</span>) sum = sum + Si[<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">if</span>(N == <span class="number">2</span>) sum = sum + Si[<span class="number">1</span>]; </span><br><span class="line">		<span class="keyword">if</span>(N == <span class="number">1</span>) sum = sum + Si[<span class="number">0</span>];</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">delete</span> Si;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>时间限制：1000 ms  |  内存限制：65535 KB  |  难度：5</p>
<p><strong>描述</strong></p>
<p>在漆黑的夜里，$N$位旅行者来到了一座狭窄而且没有护栏的桥边。如果不借助手电筒的话，大家是无论如何也不敢过桥去的。不幸的是，$N$个人一共只带了一只手电筒，而桥窄得只够让两个人同时过。如果各自单独过桥的话，$N$人所需要的时间已知；而如果两人同时过桥，所需要的时间就是走得比较慢的那个人单独行动时所需的时间。问题是，如何设计一个方案，让这$N$人尽快过桥。 </p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="贪心算法" scheme="http://www.gcusky.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 素数求和问题]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-3/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-3/</id>
    <published>2016-03-15T09:52:16.000Z</published>
    <updated>2016-03-18T04:03:39.242Z</updated>
    <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：2</p>
<p><strong>描述</strong></p>
<p>现在给你$N$个数$(0&lt;N&lt;1000)$，现在要求你写出一个程序，找出这$N$个数中的所有素数，并求和。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行给出整数$M(0&lt;M&lt;10)$代表多少组测试数据<br>每组测试数据第一行给你$N$，代表该组测试数据的数量。<br>接下来的$N$个数为要测试的数据，每个数小于$1000$</p>
<p><strong>输出</strong></p>
<p>每组测试数据结果占一行，输出给出的测试数据的所有素数和</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3<br>5<br>1 2 3 4 5<br>8<br>11 12 13 14 15 16 17 18<br>10<br>21 22 23 24 25 26 27 28 29 30</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>10<br>41<br>52</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=22" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=22</a></p>
<!-- more -->
<h3 id="u65B9_u6CD5_u4E00_uFF1A_u679A_u4E3E_u6CD5"><a href="#u65B9_u6CD5_u4E00_uFF1A_u679A_u4E3E_u6CD5" class="headerlink" title="方法一：枚举法"></a>方法一：枚举法</h3><p>在一般领域，对正整数$n$，如果用$2$到$\sqrt{n}$之间的所有整数去除，均无法整除，则$n$为质数。<br>质数大于等于2 不能被它本身和1以外的数整除.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>|| n%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>; i*i&lt;=n; i+=<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n%i==<span class="number">0</span>|| n%(i+<span class="number">2</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,d;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">	<span class="keyword">while</span>(a--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;b;d=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(b--)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">			<span class="keyword">if</span>(isPrime(c)) d=d+c;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u65B9_u6CD5_u4E8C_uFF1AMiller-Rabin_u6D4B_u8BD5"><a href="#u65B9_u6CD5_u4E8C_uFF1AMiller-Rabin_u6D4B_u8BD5" class="headerlink" title="方法二：Miller-Rabin测试"></a>方法二：Miller-Rabin测试</h3><p>Miller-Rabin测试：要测试$N$是否为素数，首先将$N-1$分解为$2^Sd$。在每次测试开始时，先随机选一个介于$[1,N-1]$的整数$a$，如果对所有的$r∈[0,s-1]$都满足$a^dmod{N}≠1$且$a^dmod{N}≠-1$，则$N$是合数。否则，$N$有$3/4$的几率为素数。为了提高测试的正确性，可以选择不同的$a$进行多次测试。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> i,<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span>&#123;<span class="comment">// 快速幂</span></span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>%n;</span><br><span class="line">	<span class="keyword">int</span> temp = pow_mod(a,i&gt;&gt;<span class="number">1</span>,n);</span><br><span class="line">	temp = temp*temp%n;</span><br><span class="line">	<span class="keyword">if</span>(i&amp;<span class="number">1</span>) temp = (<span class="keyword">long</span> <span class="keyword">long</span>)temp*a%n;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> a,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(n==a) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(!(d&amp;<span class="number">1</span>)) d=d&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> t = pow_mod(a,d,n);</span><br><span class="line">	<span class="keyword">while</span>((d!=n-<span class="number">1</span>)&amp;&amp;(t!=<span class="number">1</span>)&amp;&amp;(t!=n-<span class="number">1</span>))&#123;</span><br><span class="line">		t = (<span class="keyword">long</span> <span class="keyword">long</span>)t*t%n;</span><br><span class="line">		d = d&lt;&lt;<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (t==n-<span class="number">1</span> || (d&amp;<span class="number">1</span>)==<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> a[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">61</span>&#125;;<span class="comment">// 测试集，更广的测试范围需要更大的测试集 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">2</span>; ++i)</span><br><span class="line">		<span class="keyword">if</span>(!test(n,a[i],n-<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,d;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">	<span class="keyword">while</span>(a--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;b;d=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(b--)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">			<span class="keyword">if</span>(isPrime(c)) d=d+c;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://baike.baidu.com/view/10626.htm?fromtitle=%E7%B4%A0%E6%95%B0&amp;fromid=115069&amp;type=syn" title="质数_百度百科" target="_blank" rel="external">质数_百度百科</a><br><a href="http://item.jd.com/11160915.html" title="ACM国际大学生程序设计竞赛：算法与实现" target="_blank" rel="external">ACM国际大学生程序设计竞赛：算法与实现</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：2</p>
<p><strong>描述</strong></p>
<p>现在给你$N$个数$(0&lt;N&lt;1000)$，现在要求你写出一个程序，找出这$N$个数中的所有素数，并求和。</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="数学" scheme="http://www.gcusky.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="语言入门" scheme="http://www.gcusky.com/tags/%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 蛇形填数]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-4/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-4/</id>
    <published>2016-03-15T08:38:03.000Z</published>
    <updated>2016-03-18T03:09:42.031Z</updated>
    <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>在$n×n$方阵里填入$1,2,…,n×n$,要求填成蛇形。例如$n=4$时方阵为：</p>
<p>$$<br>\begin{matrix}<br>10 &amp; 11 &amp; 12 &amp; 1 \\<br>9 &amp; 16 &amp; 13 &amp; 2 \\<br>8 &amp; 15 &amp; 14 &amp; 3 \\<br>7 &amp; 6 &amp; 5 &amp; 4 \\<br>\end{matrix}<br>$$</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>直接输入方阵的维数，即n的值。(n&lt;=100)</p>
<p><strong>输出</strong></p>
<p>输出结果是蛇形方阵。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>7 8 1<br>6 9 2<br>5 4 3</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=33" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=33</a></p>
<h3 id="u7A0B_u5E8F_u5B9E_u73B0_uFF1A_u5206_u6CBB_u6CD5_u5B9E_u73B0_u6570_u5B57_u65CB_u8F6C_u65B9_u9635"><a href="#u7A0B_u5E8F_u5B9E_u73B0_uFF1A_u5206_u6CBB_u6CD5_u5B9E_u73B0_u6570_u5B57_u65CB_u8F6C_u65B9_u9635" class="headerlink" title="程序实现：分治法实现数字旋转方阵"></a>程序实现：分治法实现数字旋转方阵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> **data;</span><br><span class="line"><span class="comment">//number：要填的数值，begin：每一层的起始位置(i)，size：方阵的大小 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Full</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> begin, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">	<span class="comment">//从number开始填写size阶方阵，右上角的下标（begin，begin+size-1）</span></span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">if</span>(size==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(size==<span class="number">1</span>)&#123;</span><br><span class="line">		data[begin][begin] = number;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	i = begin; j = begin+size-<span class="number">1</span>;<span class="comment">//初始化右上角坐标 </span></span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size-<span class="number">1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;i++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size-<span class="number">1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;j--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size-<span class="number">1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;i--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size-<span class="number">1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;j++;</span><br><span class="line">	&#125;</span><br><span class="line">	Full(number, begin+<span class="number">1</span>,size-<span class="number">2</span>);<span class="comment">//递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	data = <span class="keyword">new</span> <span class="keyword">int</span> *[num];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) data[i] = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">	Full(<span class="number">1</span>,<span class="number">0</span>,num);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;num; j++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;data[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C++__u5168_u5C40_u4E8C_u7EF4_u6570_u7EC4"><a href="#C++__u5168_u5C40_u4E8C_u7EF4_u6570_u7EC4" class="headerlink" title="C++  全局二维数组"></a>C++  全局二维数组</h3><p><strong>C/C++无法声明一个全局不定大小的二维数组，不过可以用二级指针来模拟</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> **data; <span class="comment">//声明二级指针data，指向一个指针数组（切记不是指向一个二维数组）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M,N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N; <span class="comment">//输入两个维度</span></span><br><span class="line">    data = <span class="keyword">new</span> <span class="keyword">int</span> *[M]; <span class="comment">//开辟指针数组</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;M; i++)</span><br><span class="line">        data[i] = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="comment">//这样以后使用data[i][j]就像二维数组一样</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>在$n×n$方阵里填入$1,2,…,n×n$,要求填成蛇形。例如$n=4$时方阵为：</p>
<p>$$<br>\begin{matrix}<br>10 &amp; 11 &amp; 12 &amp; 1 \\<br>9 &amp; 16 &amp; 13 &amp; 2 \\<br>8 &amp; 15 &amp; 14 &amp; 3 \\<br>7 &amp; 6 &amp; 5 &amp; 4 \\<br>\end{matrix}<br>$$</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="分治法" scheme="http://www.gcusky.com/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="语言入门" scheme="http://www.gcusky.com/tags/%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 奇偶数分离]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-2/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-2/</id>
    <published>2016-03-15T08:29:58.000Z</published>
    <updated>2016-03-18T03:07:22.865Z</updated>
    <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：1</p>
<p><strong>描述</strong></p>
<p>有一个整型偶数$n(2&lt;= n &lt;=10000)$,你要做的是：先把$1$到$n$中的所有奇数从小到大输出，再把所有的偶数从小到大输出。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行有一个整数$i(2&lt;=i&lt;30)$表示有$i$组测试数据；<br>每组有一个整型偶数$n$。</p>
<p><strong>输出</strong></p>
<p>第一行输出所有的奇数<br>第二行输出所有的偶数</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>10<br>14</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>1 3 5 7 9<br>2 4 6 8 10<br>　<br>1 3 5 7 9 11 13<br>2 4 6 8 10 12 14 </p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=11" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=11</a></p>
<h3 id="u7A0B_u5E8F_u5B9E_u73B01"><a href="#u7A0B_u5E8F_u5B9E_u73B01" class="headerlink" title="程序实现1"></a>程序实现1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">int</span> x [num];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=x[i]; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j%<span class="number">2</span>) a.push_back(j);</span><br><span class="line">			<span class="keyword">else</span> b.push_back(j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.size(); j++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a.at(j)&lt;&lt;<span class="string">" "</span>;			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b.size(); j++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;b.at(j)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">		a.clear();b.clear();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u7A0B_u5E8F_u5B9E_u73B02"><a href="#u7A0B_u5E8F_u5B9E_u73B02" class="headerlink" title="程序实现2"></a>程序实现2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=x; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j%<span class="number">2</span>) a.push_back(j);</span><br><span class="line">            <span class="keyword">else</span> b.push_back(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.size(); j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a.at(j)&lt;&lt;<span class="string">" "</span>;         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b.size(); j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b.at(j)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	<span class="keyword">while</span>(num--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		display(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u533A_u522B"><a href="#u533A_u522B" class="headerlink" title="区别"></a>区别</h3><ol>
<li>第二个简洁，但是边输入边处理，也没存储起来，不过南阳的判断是正确的。原来可以这样ToT</li>
<li>为了方便直接用了C++ Vectors，其实动态指针数组应该会更好Orz</li>
</ol>
<blockquote>
<p>结果    时间    内存    语言    提交时间<br>程序2    Accepted    0    308    C/C++    03-14 14:51:29<br>程序1    Accepted    4    308    C/C++    03-14 14:46:19</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：1</p>
<p><strong>描述</strong></p>
<p>有一个整型偶数$n(2&lt;= n &lt;=10000)$,你要做的是：先把$1$到$n$中的所有奇数从小到大输出，再把所有的偶数从小到大输出。</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="语言入门" scheme="http://www.gcusky.com/tags/%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 ASCII码排序]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-1/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-1/</id>
    <published>2016-03-15T08:20:48.000Z</published>
    <updated>2016-03-18T03:05:17.880Z</updated>
    <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：2</p>
<p><strong>描述</strong></p>
<p>输入三个字符（可以重复）后，按各字符的ASCII码从小到大的顺序输出这三个字符。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行输入一个数N,表示有N组测试数据。后面的N行输入多组数据，每组输入数据都是占一行，有三个字符组成，之间无空格。</p>
<p><strong>输出</strong></p>
<p>对于每组输入数据，输出一行，字符中间用一个空格分开。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>qwe<br>asd</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>e q w<br>a d s</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=4" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=4</a></p>
<h3 id="u65B9_u6CD5_u4E00_uFF1A_u4F7F_u7528_u6570_u7EC4_u6307_u9488"><a href="#u65B9_u6CD5_u4E00_uFF1A_u4F7F_u7528_u6570_u7EC4_u6307_u9488" class="headerlink" title="方法一：使用数组指针"></a>方法一：使用数组指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">char</span> a,b,c;</span><br><span class="line">	<span class="comment">//申请空间 </span></span><br><span class="line">	<span class="comment">//使用数组指针，分配一个指针数组，将其首地址保存在x </span></span><br><span class="line">	<span class="keyword">char</span> **x = <span class="keyword">new</span> <span class="keyword">char</span>*[num];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		<span class="comment">//然后再为指针数组的每个元素分配一个数组</span></span><br><span class="line">		x[i]=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];</span><br><span class="line">		x[i][<span class="number">0</span>] = a; x[i][<span class="number">1</span>] = b; x[i][<span class="number">2</span>] = c;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//传递数组参数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; num;j++)&#123;  </span><br><span class="line">        <span class="comment">//sort(x[j]);</span></span><br><span class="line">        sort(x[j],x[j]+<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt; <span class="number">3</span>;k++)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x[j][k]&lt;&lt;<span class="string">" "</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放空间</span></span><br><span class="line">    <span class="comment">//该方法定义的动态二维数组的释放</span></span><br><span class="line">	<span class="comment">//需先释放指针数组的每个元素指向的数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num;i++)&#123;  </span><br><span class="line">        <span class="keyword">delete</span> x[i];  </span><br><span class="line">        x[i] = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后再释放该指针数组</span></span><br><span class="line">    <span class="keyword">delete</span> []x;</span><br><span class="line">    x = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;num;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u65B9_u6CD5_u4E8C_uFF1A_u4F7F_u7528Vector"><a href="#u65B9_u6CD5_u4E8C_uFF1A_u4F7F_u7528Vector" class="headerlink" title="方法二：使用Vector"></a>方法二：使用Vector</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">char</span> a,b,c;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="comment">//申请空间 </span></span><br><span class="line">	<span class="comment">//Vectors 包含着一系列连续存储的元素,其行为和数组类似。</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; x(num,<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;(<span class="number">3</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		x[i][<span class="number">0</span>] = a;</span><br><span class="line">		x[i][<span class="number">1</span>] = b;</span><br><span class="line">		x[i][<span class="number">2</span>] = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; num;j++)&#123;</span><br><span class="line">        sort(x[j].begin(),x[j].end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt; <span class="number">3</span>;k++)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x[j][k]&lt;&lt;<span class="string">" "</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<ol>
<li><a href="http://www.cnblogs.com/li-peng/p/4116349.html" title="详解c++指针的指针和指针的引用" target="_blank" rel="external">详解C++指针的指针和指针的引用</a></li>
<li><a href="http://blog.csdn.net/longshengguoji/article/details/11131365" title="C++建立动态二维数组" target="_blank" rel="external">C++建立动态二维数组</a></li>
<li><a href="http://blog.csdn.net/hongjiqin/article/details/5739935" title="C++给函数传数组参数" target="_blank" rel="external">C++给函数传数组参数</a></li>
<li><a href="http://blog.csdn.net/ajioy/article/details/6976945" title="c++中sort&#40;&#41;及qsort&#40;&#41;的用法总结" target="_blank" rel="external">C++中sort()及qsort()的用法总结</a></li>
</ol>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：2</p>
<p><strong>描述</strong></p>
<p>输入三个字符（可以重复）后，按各字符的ASCII码从小到大的顺序输出这三个字符。</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="STL练习" scheme="http://www.gcusky.com/tags/STL%E7%BB%83%E4%B9%A0/"/>
    
      <category term="语言入门" scheme="http://www.gcusky.com/tags/%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【C++】 Fibonacci数]]></title>
    <link href="http://www.gcusky.com/2016/03/14/acm/"/>
    <id>http://www.gcusky.com/2016/03/14/acm/</id>
    <published>2016-03-14T08:14:32.000Z</published>
    <updated>2016-03-18T04:08:55.535Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>以前用惯了java和php之类的编程语言，但蓝桥杯却报了C/C++组……，只能重新以此方式熟悉C++语言特性与算法了。</p>
</blockquote>
<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：1</p>
<p><strong>描述</strong></p>
<p>无穷数列$1，1，2，3，5，8，13，21，34，55…$称为Fibonacci数列，它可以递归地定义为<br>$F(n)=1 ………..(n=1或n=2)$<br>$F(n)=F(n-1)+F(n-2)…..(n&gt;2)$<br>现要你来求第$n$个斐波纳奇数。（第1个、第二个都为1)</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行是一个整数$m(m&lt;5)$表示共有$m$组测试数据<br>每次测试数据只有一行，且只有一个整形数$n(n&lt;20)$</p>
<p><strong>输出</strong></p>
<p>对每组输入$n$，输出第$n$个Fibonacci数</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3<br>1<br>3<br>5</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>1<br>2<br>5</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=13" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=13</a></p>
<h2 id="u7A0B_u5E8F_u5B9E_u73B0"><a href="#u7A0B_u5E8F_u5B9E_u73B0" class="headerlink" title="程序实现"></a>程序实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">	<span class="keyword">return</span> fibonacci(n-<span class="number">1</span>)+fibonacci(n-<span class="number">2</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num,x;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">while</span>(num--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fibonacci(x)&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>以前用惯了java和php之类的编程语言，但蓝桥杯却报了C/C++组……，只能重新以此方式熟悉C++语言特性与算法了。</p>
</blockquote>
<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：1</p>
<p><strong>描述</strong></p>
<p>无穷数列$1，1，2，3，5，8，13，21，34，55…$称为Fibonacci数列，它可以递归地定义为<br>$F(n)=1 ………..(n=1或n=2)$<br>$F(n)=F(n-1)+F(n-2)…..(n&gt;2)$<br>现要你来求第$n$个斐波纳奇数。（第1个、第二个都为1)</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="语言入门" scheme="http://www.gcusky.com/tags/%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[test-of-latex【机器学习week1-2】]]></title>
    <link href="http://www.gcusky.com/2016/02/05/test-of-latex/"/>
    <id>http://www.gcusky.com/2016/02/05/test-of-latex/</id>
    <published>2016-02-05T03:53:06.000Z</published>
    <updated>2016-03-14T02:25:48.645Z</updated>
    <content type="html"><![CDATA[<h1 id="u5355_u53D8_u91CF_u7EBF_u6027_u56DE_u5F52_28Linear_Regression_with_One_Variable_29"><a href="#u5355_u53D8_u91CF_u7EBF_u6027_u56DE_u5F52_28Linear_Regression_with_One_Variable_29" class="headerlink" title="单变量线性回归(Linear Regression with One Variable)"></a>单变量线性回归(Linear Regression with One Variable)</h1><p><code>本文为机器学习部分笔记，含大量公式，用于Latex测试</code><br><a id="more"></a></p>
<h2 id="u6A21_u578B_u8868_u8FBE_uFF08Model_Representation_uFF09"><a href="#u6A21_u578B_u8868_u8FBE_uFF08Model_Representation_uFF09" class="headerlink" title="模型表达（Model Representation）"></a>模型表达（Model Representation）</h2><p>以之前的房屋交易问题为例，假使我们回归问题的训练集（Training Set）如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$Size$ $in$ $feet^2(x)$</th>
<th style="text-align:center">$Price(\$)$ $in$ $1000’s(y)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2104</td>
<td style="text-align:center">460</td>
</tr>
<tr>
<td style="text-align:center">1416</td>
<td style="text-align:center">232</td>
</tr>
<tr>
<td style="text-align:center">1534</td>
<td style="text-align:center">315</td>
</tr>
<tr>
<td style="text-align:center">852</td>
<td style="text-align:center">178</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
</tbody>
</table>
<blockquote>
<p>我们将要用来描述这个回归问题的标记如下:</p>
<ul>
<li>$m$ 代表训练集中实例的数量</li>
<li>$x$ 代表特征/输入变量</li>
<li>$y$ 代表目标变量/输出变量</li>
<li>$(x,y)$ 代表训练集中的实例</li>
<li>$(x^{(i)},y^{(i)})$ 代表第 i 个观察实例</li>
<li>$h$ 代表学习算法的解决方案或函数也称为假设（hypothesis）</li>
</ul>
</blockquote>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_9.png?imageView/2/w/450" alt=""></p>
<p>　　因而，要解决房价预测问题，我们实际上是要将训练集“喂”给我们的学习算法，进而学习得一个假设 $h$，然后将我们要预测的房屋的尺寸作为输入变量输入给 $h$，预测出该房屋的交易价格作为输出变量输出为结果。那么，对于我们的房价预测问题，我们该如何表达 $h$ ？<br>　　一种可能的表达方式为：$h_θ=θ_0+θ_1x$；因为只含有一个特征/输入变量，因此这样的问题叫作<strong>单变量线性回归问题</strong>。</p>
<h2 id="u4EE3_u4EF7_u51FD_u6570_uFF08Cost_Function_uFF09"><a href="#u4EE3_u4EF7_u51FD_u6570_uFF08Cost_Function_uFF09" class="headerlink" title="代价函数（Cost Function）"></a>代价函数（Cost Function）</h2><table>
<thead>
<tr>
<th style="text-align:center">Hypothesis:</th>
<th style="text-align:center">$h_θ=θ_0+θ_1x$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Parameters:</td>
<td style="text-align:center">$θ_0$, $θ_0$</td>
</tr>
<tr>
<td style="text-align:center"><strong>Cost Function:</strong></td>
<td style="text-align:center">$$J(θ_0,θ_1)=\frac{1}{2m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})^2$$</td>
</tr>
<tr>
<td style="text-align:center">Goal:</td>
<td style="text-align:center">$\mathop{minimize} \limits_{θ_0,θ_1}J(θ_0,θ_1)$</td>
</tr>
</tbody>
</table>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_10.png?imageView/2/w/450" alt=""></p>
<p>　　我们现在要做的便是为我们的模型选择合适的参数（parameters）$θ_0$和 $θ_1$，在房价问题这个例子中便是直线的斜率和在 $y$ 轴上的截距。<br>　　我们选择的参数决定了我们得到的直线相对于我们的训练集的准确程度，模型所预测的值与训练集中实际值之间的差距就是<strong>建模误差（modeling error）</strong>。<br>　　我们的目标便是选择出可以使得建模误差的平方和能够最小的模型参数。<br>　　即使得代价函数$J(θ_0,θ_1)=\frac{1}{2m}\sum^m_{i=1}(h_θ(x^{(i)})-y^{(i)})^2$最小。接下来我们绘制一个等高线图， $(x,y,z)$ 三个坐标分别为 $θ_0$ 和 $θ_1$和 $J(θ_0,θ_1)$：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_11.png?imageView/2/w/500" alt=""></p>
<p>　　则可以看出在三维空间中存在一个使得 $J(θ_0,θ_1)$ 最小的点。</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_12.png?imageView/2/w/700" alt="其中一种拟合情况"></p>
<h2 id="u68AF_u5EA6_u4E0B_u964D_uFF08Gradient_Descent_uFF09"><a href="#u68AF_u5EA6_u4E0B_u964D_uFF08Gradient_Descent_uFF09" class="headerlink" title="梯度下降（Gradient Descent）"></a>梯度下降（Gradient Descent）</h2><h3 id="u57FA_u672C_u601D_u60F3"><a href="#u57FA_u672C_u601D_u60F3" class="headerlink" title="基本思想"></a>基本思想</h3><p>　　开始时我们随机选择一个参数的组合$（θ_0,θ_1,…,θ_n）$，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合。 我们持续这么做直到到到一个<strong>局部最小值（local minimum）</strong>,因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是<strong>全局最小值（global minimum）</strong>,选择不同的初始参数组合，可能会找到不同的局部最小值（如下图）。</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_13.png?imageView/2/w/700" alt=""><br><img src="http://cloud.gcusky.com/MLMOOC/ML1_15.png" alt=""></p>
<h2 id="u5BF9_u7EBF_u6027_u56DE_u5F52_u8FD0_u7528_u68AF_u5EA6_u4E0B_u964D_u6CD5"><a href="#u5BF9_u7EBF_u6027_u56DE_u5F52_u8FD0_u7528_u68AF_u5EA6_u4E0B_u964D_u6CD5" class="headerlink" title="对线性回归运用梯度下降法"></a>对线性回归运用梯度下降法</h2><h3 id="u68AF_u5EA6_u4E0B_u964D_u7684_u76F4_u89C2_u7406_u89E3"><a href="#u68AF_u5EA6_u4E0B_u964D_u7684_u76F4_u89C2_u7406_u89E3" class="headerlink" title="梯度下降的直观理解"></a>梯度下降的直观理解</h3><blockquote>
<p>梯度下降是一个用来求函数最小值的算法，我们将使用梯度下降算法来求出代价函数 $J(θ_0,θ_1)$ 的最小值。</p>
</blockquote>
<p>　　梯度下降算法：$θ_j:=θ_j-α\frac{\partial}{\partialθ_j}J(θ_0,θ_1)$<br>　　对 $θ$ 赋值，使得 $J(θ)$ 按梯度下降最快方向进行，一直迭代下去，最终得到局部最小值。其中 $α$ 是<strong>学习率（learning rate）</strong>，它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大。<strong>注意：计算时 $θ_0$ 和 $θ_1$ 要同步更新（simultaneous update）。</strong></p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_14.png?imageView/2/w/600" alt=""></p>
<h3 id="u68AF_u5EA6_u4E0B_u964D_u7684_u7EBF_u6027_u56DE_u5F52"><a href="#u68AF_u5EA6_u4E0B_u964D_u7684_u7EBF_u6027_u56DE_u5F52" class="headerlink" title="梯度下降的线性回归"></a>梯度下降的线性回归</h3><p>　　梯度下降算法和线性回归算法比较如图：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_16.png?imageView/2/w/600" alt=""></p>
<p>　　对我们之前的线性回归问题运用梯度下降法，关键在于求出代价函数的导数，即：</p>
<p>$\frac{\partial}{\partialθ_j}J(θ_0,θ_1)=\frac{\partial}{\partialθ_j}\frac{1}{2m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})^2$<br>　　$j=0$ 时：$\frac{\partial}{\partialθ_0}J(θ_0,θ_1)=\frac{1}{m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})$<br>　　$j=1$ 时：$\frac{\partial}{\partialθ_1}J(θ_0,θ_1)=\frac{1}{m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})·x^{(i)}$</p>
<p>　　则算法改写成：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_17.png?imageView/2/w/600" alt=""></p>
<p>　　拟合情况：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_18.png" alt=""><br><img src="http://cloud.gcusky.com/MLMOOC/ML1_19.png" alt=""><br><img src="http://cloud.gcusky.com/MLMOOC/ML1_20.png" alt=""></p>
<p>　　<br>参考资料<br><a href="http://mooc.guokr.com/note/12/" title="MOOC学院" target="_blank" rel="external">机器学习课笔记 —— Ryan Cheung</a><br><a href="http://mooc.guokr.com/note/16274/" title="MOOC学院" target="_blank" rel="external">机器学习教程个人笔记（V2.5）—— 黄海广</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5355_u53D8_u91CF_u7EBF_u6027_u56DE_u5F52_28Linear_Regression_with_One_Variable_29"><a href="#u5355_u53D8_u91CF_u7EBF_u6027_u56DE_u5F52_28Linear_Regression_with_One_Variable_29" class="headerlink" title="单变量线性回归(Linear Regression with One Variable)"></a>单变量线性回归(Linear Regression with One Variable)</h1><p><code>本文为机器学习部分笔记，含大量公式，用于Latex测试</code><br>]]>
    
    </summary>
    
      <category term="machinelearning" scheme="http://www.gcusky.com/tags/machinelearning/"/>
    
      <category term="test" scheme="http://www.gcusky.com/categories/test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://www.gcusky.com/2016/02/02/hello-world/"/>
    <id>http://www.gcusky.com/2016/02/02/hello-world/</id>
    <published>2016-02-02T14:19:35.760Z</published>
    <updated>2016-02-02T14:19:35.706Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 基本配置]]></title>
    <link href="http://www.gcusky.com/2016/02/02/learn-hexo/"/>
    <id>http://www.gcusky.com/2016/02/02/learn-hexo/</id>
    <published>2016-02-02T14:10:24.000Z</published>
    <updated>2016-02-03T07:25:06.036Z</updated>
    <content type="html"><![CDATA[<h2 id="Hexo_u5168_u5C40_u57FA_u7840_u914D_u7F6E"><a href="#Hexo_u5168_u5C40_u57FA_u7840_u914D_u7F6E" class="headerlink" title="Hexo全局基础配置"></a>Hexo全局基础配置</h2><blockquote>
<p>用文本编辑器修改 _config.yml 这个文件，大致如下，只需要自动修改几个其他保持默认即可。<br>通常需要修改站点名称/URL 格式/归档设置/Disqus 评论用户名/部署配置，这几项就可以了，注意冒号后面都要添加一个半角空格，之后才是设置参数。<br>自定义域名设置在 source 文件夹下面新建 CNAME 文件，里面写入你的自定义域名，并设置你的 dns 配置 cname 方式到服务器供应商给出的地址即可。</p>
</blockquote>
<a id="more"></a>
<h3 id="u7F51_u7AD9_Site"><a href="#u7F51_u7AD9_Site" class="headerlink" title="网站 Site"></a>网站 Site</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>网站标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td>description</td>
<td>网站描述</td>
</tr>
<tr>
<td>author</td>
<td>你的名字</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言</td>
</tr>
<tr>
<td>timezone</td>
<td>网站时区，Hexo 预设使用你电脑的时区，时区列表。</td>
</tr>
</tbody>
</table>
<h3 id="u7F51_u5740_URL"><a href="#u7F51_u5740_URL" class="headerlink" title="网址 URL"></a>网址 URL</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>网址</td>
<td><a href="http://yoursite.com/" target="_blank" rel="external">http://yoursite.com/</a></td>
</tr>
<tr>
<td>root</td>
<td>网站根目录</td>
<td>/</td>
</tr>
<tr>
<td>permalink</td>
<td>文章的永久链接格式</td>
<td>：year/:month/:day/:title/</td>
</tr>
<tr>
<td>permalink_default</td>
<td>永久连接中各部分的默认值</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>网站存放在子目录</strong><br>如果你的网站存放在子目录中，例如 <a href="http://yoursite.com/blog" target="_blank" rel="external">http://yoursite.com/blog</a> ，则请将 url 设为 <a href="http://yoursite/blog" target="_blank" rel="external">http://yoursite/blog</a> 并把 root 设为 /blog/。</p>
</blockquote>
<h3 id="u76EE_u5F55_Directory"><a href="#u76EE_u5F55_Directory" class="headerlink" title="目录 Directory"></a>目录 Directory</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>source_dir</td>
<td>资源文件夹，这个文件夹用来存放内容</td>
<td>source</td>
</tr>
<tr>
<td>public_dir</td>
<td>公共文件夹，这个文件夹用于存放生成的站点文件</td>
<td>public</td>
</tr>
<tr>
<td>tag_dir</td>
<td>标签文件夹</td>
<td>tags</td>
</tr>
<tr>
<td>archive_dir</td>
<td>归档文件夹</td>
<td>archives</td>
</tr>
<tr>
<td>category_dir</td>
<td>分类文件夹</td>
<td>categories</td>
</tr>
<tr>
<td>code_dir</td>
<td>Incloud code 文件夹</td>
<td>downloads/code</td>
</tr>
<tr>
<td>i18n_dir</td>
<td>国际化（i18n）文件夹</td>
<td>lang</td>
</tr>
<tr>
<td>skip_render</td>
<td>跳过制定文件的渲染，你可以使用 glob 来配置路径。</td>
</tr>
</tbody>
</table>
<h3 id="u6587_u7AE0_Writing"><a href="#u6587_u7AE0_Writing" class="headerlink" title="文章 Writing"></a>文章 Writing</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>new_post_name</td>
<td>新文章的文件名称为</td>
<td>title.md</td>
</tr>
<tr>
<td>default_layout</td>
<td>预设布局</td>
<td>post</td>
</tr>
<tr>
<td>auto_spacing</td>
<td>在中文和英文之间加入空格</td>
<td>false</td>
</tr>
<tr>
<td>titlecase</td>
<td>把标题转化为 title case</td>
<td>false</td>
</tr>
<tr>
<td>external_link</td>
<td>在新建标签中打开链接</td>
<td>true</td>
</tr>
<tr>
<td>filename_case</td>
<td>把文件名称转换为（1）小写或（2）大写</td>
<td>0</td>
</tr>
<tr>
<td>render_drafts</td>
<td>显示草稿</td>
<td>false</td>
</tr>
<tr>
<td>post_asset_folder</td>
<td>启动 Asset 文件夹</td>
<td>false</td>
</tr>
<tr>
<td>relative_link</td>
<td>把链接改为与根目录相对的位置</td>
<td>false</td>
</tr>
<tr>
<td>future</td>
<td>显示未来的文章标题</td>
<td>ture</td>
</tr>
<tr>
<td>highlight</td>
<td>代码块的设置</td>
</tr>
</tbody>
</table>
<h3 id="u5206_u7C7B_26amp_3B_u6807_u7B7E_Category__26amp_3B_Tag"><a href="#u5206_u7C7B_26amp_3B_u6807_u7B7E_Category__26amp_3B_Tag" class="headerlink" title="分类&amp;标签 Category &amp; Tag"></a>分类&amp;标签 Category &amp; Tag</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>default_category</td>
<td>默认分类</td>
<td>uncategoried</td>
</tr>
<tr>
<td>category_map</td>
<td>分类别名</td>
<td></td>
</tr>
<tr>
<td>tap_map</td>
<td>标签名称</td>
</tr>
</tbody>
</table>
<h3 id="u65E5_u671F/_u65F6_u95F4_u683C_u5F0F_Date_/_Time_format"><a href="#u65E5_u671F/_u65F6_u95F4_u683C_u5F0F_Date_/_Time_format" class="headerlink" title="日期/时间格式 Date / Time format"></a>日期/时间格式 Date / Time format</h3><p>Hexo 使用 Moment.js 来解析和显示时间。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>date_format</td>
<td>日期格式</td>
<td>MMM D YYYY</td>
</tr>
<tr>
<td>time_format</td>
<td>时间格式</td>
<td>H:mm:ss</td>
</tr>
</tbody>
</table>
<h3 id="u5206_u9875_Pagination"><a href="#u5206_u9875_Pagination" class="headerlink" title="分页 Pagination"></a>分页 Pagination</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>per_page</td>
<td>每页显示的文章量（0=关闭分页功能）</td>
<td>10</td>
</tr>
<tr>
<td>pagination_dir</td>
<td>分页目录</td>
<td>page</td>
</tr>
</tbody>
</table>
<h3 id="u6269_u5C55_u4E0E_u90E8_u7F72_Extensions_/_Deployment"><a href="#u6269_u5C55_u4E0E_u90E8_u7F72_Extensions_/_Deployment" class="headerlink" title="扩展与部署 Extensions / Deployment"></a>扩展与部署 Extensions / Deployment</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>theme</td>
<td>当前主标题名称</td>
</tr>
<tr>
<td>deploy</td>
<td>部署</td>
</tr>
</tbody>
</table>
<h2 id="github_u548Cgitcafe_u591A_u90E8_u7F72"><a href="#github_u548Cgitcafe_u591A_u90E8_u7F72" class="headerlink" title="github和gitcafe多部署"></a>github和gitcafe多部署</h2><h3 id="u4FEE_u6539_config-yml_u7684deploy"><a href="#u4FEE_u6539_config-yml_u7684deploy" class="headerlink" title="修改_config.yml的deploy"></a>修改_config.yml的deploy</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: update  #<span class="id">#git</span> message 建议默认字段 update 可以自定义</span><br><span class="line">  repo: </span><br><span class="line">  gitcafe: &lt;repository url&gt;,[branch] #<span class="id">#gitcafe</span> 仓库地址和分支</span><br><span class="line">  github: &lt;repository url&gt;,[branch] #<span class="id">#github</span> 仓库地址和分支</span><br></pre></td></tr></table></figure>
<blockquote>
<p>repository url 都使用SSH链接可免密码操作</p>
</blockquote>
<h3 id="u5206_u522B_u5728_github__u548C_gitcafe__u521B_u5EFA_u9879_u76EE"><a href="#u5206_u522B_u5728_github__u548C_gitcafe__u521B_u5EFA_u9879_u76EE" class="headerlink" title="分别在 github 和 gitcafe 创建项目"></a>分别在 github 和 gitcafe 创建项目</h3><p>生成.ssh，添加到</p>
<blockquote>
<p>GitHub -&gt; settings -&gt; SSH keys<br>GitCafe -&gt; 账户设置 -&gt; SSH公匙管理</p>
</blockquote>
<p>创建一个与用户名(如果是组织，就是组织名)相同名称的项目<br>【github 项目名要加上 <code>.github.io</code>】</p>
<blockquote>
<p>GitHub Pages 服务分支在 master<br>GitCafe Pages 服务分支在 gitcafe-pages</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="literal">d</span></span><br></pre></td></tr></table></figure>
<h3 id="u57DF_u540D_u7ED1_u5B9A"><a href="#u57DF_u540D_u7ED1_u5B9A" class="headerlink" title="域名绑定"></a>域名绑定</h3><ol>
<li>在source文件夹里创建CNAME文件，里面添加你的域名信息：yoursite.com（注意前面不添加http://）</li>
<li>域名解析网站，添加域名，添加记录【国内解析到 GitCafe ，默认解析到 GitHub 】<br><img src="http://cloud.gcusky.com/hexo/domain.png" alt="domain"></li>
</ol>
<blockquote>
<p>GitHub 解析到 <code>项目名.github.io</code><br>GitCafe 解析到 <code>gitcafe.io</code>【GitCafe还要根据 <code>相关链接2</code> 设置自定义域名】</p>
</blockquote>
<h2 id="u95EE_u9898_u89E3_u51B3"><a href="#u95EE_u9898_u89E3_u51B3" class="headerlink" title="问题解决"></a>问题解决</h2><ul>
<li><code>hexo d</code> 部署提示找不到git，<code>hexo s</code> 执行hexo server提示找不到该指令 </li>
<li>在Hexo 3.0版本后 <code>deploy git</code>、 <code>hexo server</code> 被分开，需先进行安装：<code>npm install hexo-deployer-git --save</code> <code>npm install hexo-server --save</code></li>
</ul>
<h2 id="u76F8_u5173_u94FE_u63A5"><a href="#u76F8_u5173_u94FE_u63A5" class="headerlink" title="相关链接"></a>相关链接</h2><ol>
<li>Git教程 - 廖雪峰的官方网站 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li>
<li>gitcafe Pages 相关帮助 <a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9" target="_blank" rel="external">https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9</a></li>
<li>Hexo 3.0 静态博客使用指南  <a href="https://help.gitcafe.com/practices/hexo" target="_blank" rel="external">https://help.gitcafe.com/practices/hexo</a></li>
<li>zipperar的hexo相关教程 <a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">http://zipperary.com/categories/hexo/</a></li>
<li>Hexo 搭建博客-基础配置篇 <a href="http://www.jianshu.com/p/df3edc4286d2" target="_blank" rel="external">http://www.jianshu.com/p/df3edc4286d2</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Hexo_u5168_u5C40_u57FA_u7840_u914D_u7F6E"><a href="#Hexo_u5168_u5C40_u57FA_u7840_u914D_u7F6E" class="headerlink" title="Hexo全局基础配置"></a>Hexo全局基础配置</h2><blockquote>
<p>用文本编辑器修改 _config.yml 这个文件，大致如下，只需要自动修改几个其他保持默认即可。<br>通常需要修改站点名称/URL 格式/归档设置/Disqus 评论用户名/部署配置，这几项就可以了，注意冒号后面都要添加一个半角空格，之后才是设置参数。<br>自定义域名设置在 source 文件夹下面新建 CNAME 文件，里面写入你的自定义域名，并设置你的 dns 配置 cname 方式到服务器供应商给出的地址即可。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://www.gcusky.com/tags/hexo/"/>
    
      <category term="hexo" scheme="http://www.gcusky.com/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[邓小平文选 第三卷 P363 思考：思维导图]]></title>
    <link href="http://www.gcusky.com/2015/11/18/deng363/"/>
    <id>http://www.gcusky.com/2015/11/18/deng363/</id>
    <published>2015-11-18T13:26:11.000Z</published>
    <updated>2016-03-20T13:50:39.835Z</updated>
    <content type="html"><![CDATA[<h3 id="u601D_u7EF4_u5BFC_u56FE"><a href="#u601D_u7EF4_u5BFC_u56FE" class="headerlink" title="思维导图"></a>思维导图</h3><p>还是思政课程的作业~o(^_^)o</p>
<a id="more"></a>
<p><img src="http://cloud.gcusky.com/xmind/deng3.png" alt="邓小平文选第三卷363思维导图" title="邓小平文选第三卷363思维导图"></p>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://item.jd.com/10011105.html" title="邓小平文选（第3卷）" target="_blank" rel="external">邓小平文选（第3卷）</a><br><a href="http://www.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=cjfd9093&amp;filename=qxzz199323003" title="怎么样抓住时机发展经济——学习《善于利用时机解决发展问题》一文的体会" target="_blank" rel="external">怎么样抓住时机发展经济——学习《善于利用时机解决发展问题》一文的体会</a><br><a href="http://www.cnki.net/KCMS/detail/detail.aspx?QueryID=6&amp;CurRec=1&amp;recid=&amp;filename=QZXB199402002&amp;dbname=CJFD9495" title="当代中国的稳定与发展——《邓小平文选》第三卷学习体会" target="_blank" rel="external">当代中国的稳定与发展——《邓小平文选》第三卷学习体会</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u601D_u7EF4_u5BFC_u56FE"><a href="#u601D_u7EF4_u5BFC_u56FE" class="headerlink" title="思维导图"></a>思维导图</h3><p>还是思政课程的作业~o(^_^)o</p>]]>
    
    </summary>
    
      <category term="思维导图" scheme="http://www.gcusky.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="读书笔记" scheme="http://www.gcusky.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="期刊阅览室" scheme="http://www.gcusky.com/categories/%E6%9C%9F%E5%88%8A%E9%98%85%E8%A7%88%E5%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《再思毛泽东：毛泽东思想的探索》思维导图]]></title>
    <link href="http://www.gcusky.com/2015/09/22/rethinking-mao/"/>
    <id>http://www.gcusky.com/2015/09/22/rethinking-mao/</id>
    <published>2015-09-22T06:34:45.000Z</published>
    <updated>2016-03-20T13:50:27.037Z</updated>
    <content type="html"><![CDATA[<h3 id="u601D_u7EF4_u5BFC_u56FE"><a href="#u601D_u7EF4_u5BFC_u56FE" class="headerlink" title="思维导图"></a>思维导图</h3><p>以前思政课程的作业，要读一本有关毛泽东的书。<br>觉得这本书理论与知识都挺有趣的，遂整理为思维导图。</p>
<a id="more"></a>
<p><img src="http://cloud.gcusky.com/xmind/RethinkingMao.png" alt="再思毛泽东：毛泽东思想的探索" title="再思毛泽东：毛泽东思想的探索"></p>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://item.jd.com/11546212.html" title="再思毛泽东：毛泽东思想的探索" target="_blank" rel="external">再思毛泽东：毛泽东思想的探索</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u601D_u7EF4_u5BFC_u56FE"><a href="#u601D_u7EF4_u5BFC_u56FE" class="headerlink" title="思维导图"></a>思维导图</h3><p>以前思政课程的作业，要读一本有关毛泽东的书。<br>觉得这本书理论与知识都挺有趣的，遂整理为思维导图。</p>]]>
    
    </summary>
    
      <category term="思维导图" scheme="http://www.gcusky.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="读书笔记" scheme="http://www.gcusky.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="期刊阅览室" scheme="http://www.gcusky.com/categories/%E6%9C%9F%E5%88%8A%E9%98%85%E8%A7%88%E5%AE%A4/"/>
    
  </entry>
  
</feed>
