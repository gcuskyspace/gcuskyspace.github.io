<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[GCUSKY_SPACE]]></title>
  <subtitle><![CDATA[GCUSKY的空间]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.gcusky.com/"/>
  <updated>2016-03-16T02:25:15.595Z</updated>
  <id>http://www.gcusky.com/</id>
  
  <author>
    <name><![CDATA[GCUSKY]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[C++ 过河问题]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-5/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-5/</id>
    <published>2016-03-15T12:26:19.000Z</published>
    <updated>2016-03-16T02:25:15.595Z</updated>
    <content type="html"><![CDATA[<p><strong>描述</strong></p>
<p>在漆黑的夜里，$N$位旅行者来到了一座狭窄而且没有护栏的桥边。如果不借助手电筒的话，大家是无论如何也不敢过桥去的。不幸的是，$N$个人一共只带了一只手电筒，而桥窄得只够让两个人同时过。如果各自单独过桥的话，$N$人所需要的时间已知；而如果两人同时过桥，所需要的时间就是走得比较慢的那个人单独行动时所需的时间。问题是，如何设计一个方案，让这$N$人尽快过桥。 </p>
<p><strong>输入</strong></p>
<p>第一行是一个整数 $T(1&lt;=T&lt;=20)$ 表示测试数据的组数<br>每组测试数据的第一行是一个整数 $N(1&lt;=N&lt;=1000)$ 表示共有 $N$ 个人要过河<br>每组测试数据的第二行是 $N$ 个整数 $Si$ ,表示此人过河所需要花时间。$(0&lt;Si&lt;=100)$</p>
<p><strong>输出</strong></p>
<p>输出所有人都过河需要用的最少时间</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>1<br>4<br>1 2 5 10</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>17</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=47" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=47</a></p>
<a id="more"></a>
<blockquote>
<p><strong>例子思路</strong>：1和2过去1回来，时间为2+1=3；5和10过去2回来，时间为3+10+2=15； 1和2再一起过去，时间为15+2=17。</p>
</blockquote>
<h3 id="u95EE_u9898_u601D_u8DEF"><a href="#u95EE_u9898_u601D_u8DEF" class="headerlink" title="问题思路"></a>问题思路</h3><p>首先对输入的数组进行排序。<code>sort(Si,Si+N)</code></p>
<p><strong>当人数大于等于4的时候</strong></p>
<ol>
<li>一开始只用了例子里面的方法，$Si[0]$和$Si[1]$过去，$Si[0]$回来，$Si[1]$留在对岸；$Si[n-1]$和$Si[n-2]$过去，$Si[1]$回来，$Si[n-1]$,$Si[n-2]$留在对岸；这样过去了两个人，所用时间为$Si[1]+Si[0]+Si[n-1]+Si[1]$。</li>
<li>其实还有另一种情况：$Si[0]$和$Si[n-1]$过去，$Si[0]$回来,$Si[n-1]$留在对岸；$Si[0]$和$Si[n-2]$过去，$Si[0]$回来,$Si[n-2]$,$Si[n-1]$留在对面；所用时间为$Si[n-1]+Si[0]+Si[n-2]+Si[0]$。</li>
</ol>
<p><strong>当人数为3的时候</strong></p>
<ul>
<li>$Si[1]+Si[0]+Si[2]$</li>
</ul>
<p><strong>当人数为2的时候</strong></p>
<ul>
<li>$Si[1]$</li>
</ul>
<p><strong>当人数为1的时候</strong></p>
<ul>
<li>$Si[0]$</li>
</ul>
<h3 id="u7A0B_u5E8F_u5B9E_u73B0"><a href="#u7A0B_u5E8F_u5B9E_u73B0" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T,N,i,sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> *Si;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">		Si = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;Si[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sort(Si,Si+N);</span><br><span class="line">		<span class="keyword">while</span>(N&gt;=<span class="number">4</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(Si[<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N-<span class="number">1</span>]+Si[<span class="number">1</span>] &lt; Si[N-<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N-<span class="number">2</span>]+Si[<span class="number">0</span>])</span><br><span class="line">				sum = sum + Si[<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N-<span class="number">1</span>]+Si[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				sum = sum + Si[N-<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N-<span class="number">2</span>]+Si[<span class="number">0</span>];</span><br><span class="line">			N = N-<span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(N == <span class="number">3</span>) sum = sum + Si[<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">if</span>(N == <span class="number">2</span>) sum = sum + Si[<span class="number">1</span>]; </span><br><span class="line">		<span class="keyword">if</span>(N == <span class="number">1</span>) sum = sum + Si[<span class="number">0</span>];</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">delete</span> Si;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>描述</strong></p>
<p>在漆黑的夜里，$N$位旅行者来到了一座狭窄而且没有护栏的桥边。如果不借助手电筒的话，大家是无论如何也不敢过桥去的。不幸的是，$N$个人一共只带了一只手电筒，而桥窄得只够让两个人同时过。如果各自单独过桥的话，$N$人所需要的时间已知；而如果两人同时过桥，所需要的时间就是走得比较慢的那个人单独行动时所需的时间。问题是，如何设计一个方案，让这$N$人尽快过桥。 </p>
<p><strong>输入</strong></p>
<p>第一行是一个整数 $T(1&lt;=T&lt;=20)$ 表示测试数据的组数<br>每组测试数据的第一行是一个整数 $N(1&lt;=N&lt;=1000)$ 表示共有 $N$ 个人要过河<br>每组测试数据的第二行是 $N$ 个整数 $Si$ ,表示此人过河所需要花时间。$(0&lt;Si&lt;=100)$</p>
<p><strong>输出</strong></p>
<p>输出所有人都过河需要用的最少时间</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>1<br>4<br>1 2 5 10</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>17</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=47">http://acm.nyist.net/JudgeOnline/problem.php?pid=47</a></p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://www.gcusky.com/tags/ACM/"/>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++ 素数求和问题]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-3/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-3/</id>
    <published>2016-03-15T09:52:16.000Z</published>
    <updated>2016-03-16T02:25:36.805Z</updated>
    <content type="html"><![CDATA[<p><strong>描述</strong></p>
<p>现在给你$N$个数$(0&lt;N&lt;1000)$，现在要求你写出一个程序，找出这$N$个数中的所有素数，并求和。</p>
<p><strong>输入</strong></p>
<p>第一行给出整数$M(0&lt;M&lt;10)$代表多少组测试数据<br>每组测试数据第一行给你$N$，代表该组测试数据的数量。<br>接下来的$N$个数为要测试的数据，每个数小于$1000$</p>
<p><strong>输出</strong></p>
<p>每组测试数据结果占一行，输出给出的测试数据的所有素数和</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3<br>5<br>1 2 3 4 5<br>8<br>11 12 13 14 15 16 17 18<br>10<br>21 22 23 24 25 26 27 28 29 30</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>10<br>41<br>52</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=22" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=22</a></p>
<a id="more"></a>
<h3 id="u65B9_u6CD5_u4E00_uFF1A_u679A_u4E3E_u6CD5"><a href="#u65B9_u6CD5_u4E00_uFF1A_u679A_u4E3E_u6CD5" class="headerlink" title="方法一：枚举法"></a>方法一：枚举法</h3><p>在一般领域，对正整数$n$，如果用$2$到$\sqrt{n}$之间的所有整数去除，均无法整除，则$n$为质数。<br>质数大于等于2 不能被它本身和1以外的数整除.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>|| n%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>; i*i&lt;=n; i+=<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n%i==<span class="number">0</span>|| n%(i+<span class="number">2</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,d;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">	<span class="keyword">while</span>(a--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;b;d=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(b--)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">			<span class="keyword">if</span>(isPrime(c)) d=d+c;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u65B9_u6CD5_u4E8C_uFF1AMiller-Rabin_u6D4B_u8BD5"><a href="#u65B9_u6CD5_u4E8C_uFF1AMiller-Rabin_u6D4B_u8BD5" class="headerlink" title="方法二：Miller-Rabin测试"></a>方法二：Miller-Rabin测试</h3><p>Miller-Rabin测试：要测试$N$是否为素数，首先将$N-1$分解为$2^Sd$。在每次测试开始时，先随机选一个介于$[1,N-1]$的整数$a$，如果对所有的$r∈[0,s-1]$都满足$a^dmod{N}≠1$且$a^dmod{N}≠-1$，则$N$是合数。否则，$N$有$3/4$的几率为素数。为了提高测试的正确性，可以选择不同的$a$进行多次测试。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> i,<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span>&#123;<span class="comment">// 快速幂</span></span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>%n;</span><br><span class="line">	<span class="keyword">int</span> temp = pow_mod(a,i&gt;&gt;<span class="number">1</span>,n);</span><br><span class="line">	temp = temp*temp%n;</span><br><span class="line">	<span class="keyword">if</span>(i&amp;<span class="number">1</span>) temp = (<span class="keyword">long</span> <span class="keyword">long</span>)temp*a%n;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> a,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(n==a) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(!(d&amp;<span class="number">1</span>)) d=d&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> t = pow_mod(a,d,n);</span><br><span class="line">	<span class="keyword">while</span>((d!=n-<span class="number">1</span>)&amp;&amp;(t!=<span class="number">1</span>)&amp;&amp;(t!=n-<span class="number">1</span>))&#123;</span><br><span class="line">		t = (<span class="keyword">long</span> <span class="keyword">long</span>)t*t%n;</span><br><span class="line">		d = d&lt;&lt;<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (t==n-<span class="number">1</span> || (d&amp;<span class="number">1</span>)==<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> a[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">61</span>&#125;;<span class="comment">// 测试集，更广的测试范围需要更大的测试集 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">2</span>; ++i)</span><br><span class="line">		<span class="keyword">if</span>(!test(n,a[i],n-<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,d;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">	<span class="keyword">while</span>(a--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;b;d=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(b--)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">			<span class="keyword">if</span>(isPrime(c)) d=d+c;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://baike.baidu.com/view/10626.htm?fromtitle=%E7%B4%A0%E6%95%B0&amp;fromid=115069&amp;type=syn" title="质数_百度百科" target="_blank" rel="external">质数_百度百科</a><br><a href="http://item.jd.com/11160915.html" title="ACM国际大学生程序设计竞赛：算法与实现" target="_blank" rel="external">ACM国际大学生程序设计竞赛：算法与实现</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>描述</strong></p>
<p>现在给你$N$个数$(0&lt;N&lt;1000)$，现在要求你写出一个程序，找出这$N$个数中的所有素数，并求和。</p>
<p><strong>输入</strong></p>
<p>第一行给出整数$M(0&lt;M&lt;10)$代表多少组测试数据<br>每组测试数据第一行给你$N$，代表该组测试数据的数量。<br>接下来的$N$个数为要测试的数据，每个数小于$1000$</p>
<p><strong>输出</strong></p>
<p>每组测试数据结果占一行，输出给出的测试数据的所有素数和</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3<br>5<br>1 2 3 4 5<br>8<br>11 12 13 14 15 16 17 18<br>10<br>21 22 23 24 25 26 27 28 29 30</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>10<br>41<br>52</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=22">http://acm.nyist.net/JudgeOnline/problem.php?pid=22</a></p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://www.gcusky.com/tags/ACM/"/>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++ 蛇形填数]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-4/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-4/</id>
    <published>2016-03-15T08:38:03.000Z</published>
    <updated>2016-03-16T02:27:04.554Z</updated>
    <content type="html"><![CDATA[<p><strong>描述</strong></p>
<p>在$n×n$方阵里填入$1,2,…,n×n$,要求填成蛇形。例如$n=4$时方阵为：</p>
<p>$$<br>\begin{matrix}<br>10 &amp; 11 &amp; 12 &amp; 1 \\<br>9 &amp; 16 &amp; 13 &amp; 2 \\<br>8 &amp; 15 &amp; 14 &amp; 3 \\<br>7 &amp; 6 &amp; 5 &amp; 4 \\<br>\end{matrix}<br>$$</p>
<p><strong>输入</strong></p>
<p>直接输入方阵的维数，即n的值。(n&lt;=100)</p>
<p><strong>输出</strong></p>
<p>输出结果是蛇形方阵。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>7 8 1<br>6 9 2<br>5 4 3</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=33" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=33</a></p>
<a id="more"></a>
<h3 id="u7A0B_u5E8F_u5B9E_u73B0_uFF1A_u5206_u6CBB_u6CD5_u5B9E_u73B0_u6570_u5B57_u65CB_u8F6C_u65B9_u9635"><a href="#u7A0B_u5E8F_u5B9E_u73B0_uFF1A_u5206_u6CBB_u6CD5_u5B9E_u73B0_u6570_u5B57_u65CB_u8F6C_u65B9_u9635" class="headerlink" title="程序实现：分治法实现数字旋转方阵"></a>程序实现：分治法实现数字旋转方阵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> **data;</span><br><span class="line"><span class="comment">//number：要填的数值，begin：每一层的起始位置(i)，size：方阵的大小 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Full</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> begin, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">	<span class="comment">//从number开始填写size阶方阵，右上角的下标（begin，begin+size-1）</span></span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">if</span>(size==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(size==<span class="number">1</span>)&#123;</span><br><span class="line">		data[begin][begin] = number;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	i = begin; j = begin+size-<span class="number">1</span>;<span class="comment">//初始化右上角坐标 </span></span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size-<span class="number">1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;i++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size-<span class="number">1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;j--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size-<span class="number">1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;i--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size-<span class="number">1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;j++;</span><br><span class="line">	&#125;</span><br><span class="line">	Full(number, begin+<span class="number">1</span>,size-<span class="number">2</span>);<span class="comment">//递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	data = <span class="keyword">new</span> <span class="keyword">int</span> *[num];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) data[i] = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">	Full(<span class="number">1</span>,<span class="number">0</span>,num);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;num; j++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;data[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C++__u5168_u5C40_u4E8C_u7EF4_u6570_u7EC4"><a href="#C++__u5168_u5C40_u4E8C_u7EF4_u6570_u7EC4" class="headerlink" title="C++  全局二维数组"></a>C++  全局二维数组</h3><p><strong>C/C++无法声明一个全局不定大小的二维数组，不过可以用二级指针来模拟</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> **data; <span class="comment">//声明二级指针data，指向一个指针数组（切记不是指向一个二维数组）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M,N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N; <span class="comment">//输入两个维度</span></span><br><span class="line">    data = <span class="keyword">new</span> <span class="keyword">int</span> *[M]; <span class="comment">//开辟指针数组</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;M; i++)</span><br><span class="line">        data[i] = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="comment">//这样以后使用data[i][j]就像二维数组一样</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>描述</strong></p>
<p>在$n×n$方阵里填入$1,2,…,n×n$,要求填成蛇形。例如$n=4$时方阵为：</p>
<p>$$<br>\begin{matrix}<br>10 &amp; 11 &amp; 12 &amp; 1 \\<br>9 &amp; 16 &amp; 13 &amp; 2 \\<br>8 &amp; 15 &amp; 14 &amp; 3 \\<br>7 &amp; 6 &amp; 5 &amp; 4 \\<br>\end{matrix}<br>$$</p>
<p><strong>输入</strong></p>
<p>直接输入方阵的维数，即n的值。(n&lt;=100)</p>
<p><strong>输出</strong></p>
<p>输出结果是蛇形方阵。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>7 8 1<br>6 9 2<br>5 4 3</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=33">http://acm.nyist.net/JudgeOnline/problem.php?pid=33</a></p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://www.gcusky.com/tags/ACM/"/>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++ 奇偶数分离]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-2/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-2/</id>
    <published>2016-03-15T08:29:58.000Z</published>
    <updated>2016-03-16T02:32:04.993Z</updated>
    <content type="html"><![CDATA[<p><strong>描述</strong></p>
<p>有一个整型偶数$n(2&lt;= n &lt;=10000)$,你要做的是：先把$1$到$n$中的所有奇数从小到大输出，再把所有的偶数从小到大输出。</p>
<p><strong>输入</strong></p>
<p>第一行有一个整数$i(2&lt;=i&lt;30)$表示有$i$组测试数据；<br>每组有一个整型偶数$n$。</p>
<p><strong>输出</strong></p>
<p>第一行输出所有的奇数<br>第二行输出所有的偶数</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>10<br>14</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>1 3 5 7 9<br>2 4 6 8 10<br>　<br>1 3 5 7 9 11 13<br>2 4 6 8 10 12 14 </p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=11" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=11</a></p>
<a id="more"></a>
<h3 id="u7A0B_u5E8F_u5B9E_u73B01"><a href="#u7A0B_u5E8F_u5B9E_u73B01" class="headerlink" title="程序实现1"></a>程序实现1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">int</span> x [num];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=x[i]; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j%<span class="number">2</span>) a.push_back(j);</span><br><span class="line">			<span class="keyword">else</span> b.push_back(j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.size(); j++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a.at(j)&lt;&lt;<span class="string">" "</span>;			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b.size(); j++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;b.at(j)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">		a.clear();b.clear();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u7A0B_u5E8F_u5B9E_u73B02"><a href="#u7A0B_u5E8F_u5B9E_u73B02" class="headerlink" title="程序实现2"></a>程序实现2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=x; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j%<span class="number">2</span>) a.push_back(j);</span><br><span class="line">            <span class="keyword">else</span> b.push_back(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.size(); j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a.at(j)&lt;&lt;<span class="string">" "</span>;         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b.size(); j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b.at(j)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	<span class="keyword">while</span>(num--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		display(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u533A_u522B"><a href="#u533A_u522B" class="headerlink" title="区别"></a>区别</h3><ol>
<li>第二个简洁，但是边输入边处理，也没存储起来，不过南阳的判断是正确的。原来可以这样ToT</li>
<li>为了方便直接用了C++ Vectors，其实动态指针数组应该会更好Orz</li>
</ol>
<blockquote>
<p>结果    时间    内存    语言    提交时间<br>程序2    Accepted    0    308    C/C++    03-14 14:51:29<br>程序1    Accepted    4    308    C/C++    03-14 14:46:19</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>描述</strong></p>
<p>有一个整型偶数$n(2&lt;= n &lt;=10000)$,你要做的是：先把$1$到$n$中的所有奇数从小到大输出，再把所有的偶数从小到大输出。</p>
<p><strong>输入</strong></p>
<p>第一行有一个整数$i(2&lt;=i&lt;30)$表示有$i$组测试数据；<br>每组有一个整型偶数$n$。</p>
<p><strong>输出</strong></p>
<p>第一行输出所有的奇数<br>第二行输出所有的偶数</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>10<br>14</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>1 3 5 7 9<br>2 4 6 8 10<br>　<br>1 3 5 7 9 11 13<br>2 4 6 8 10 12 14 </p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=11">http://acm.nyist.net/JudgeOnline/problem.php?pid=11</a></p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://www.gcusky.com/tags/ACM/"/>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++ ASCII码排序]]></title>
    <link href="http://www.gcusky.com/2016/03/15/acm-1/"/>
    <id>http://www.gcusky.com/2016/03/15/acm-1/</id>
    <published>2016-03-15T08:20:48.000Z</published>
    <updated>2016-03-16T02:28:19.126Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>以前用惯了java和php之类的编程语言，但蓝桥杯却报了C/C++组……，只能重新以此方式熟悉C++语言特性与算法了。</p>
</blockquote>
<p><strong>描述</strong></p>
<p>输入三个字符（可以重复）后，按各字符的ASCII码从小到大的顺序输出这三个字符。</p>
<p><strong>输入</strong></p>
<p>第一行输入一个数N,表示有N组测试数据。后面的N行输入多组数据，每组输入数据都是占一行，有三个字符组成，之间无空格。</p>
<p><strong>输出</strong></p>
<p>对于每组输入数据，输出一行，字符中间用一个空格分开。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>qwe<br>asd</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>e q w<br>a d s</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=4" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=4</a></p>
<a id="more"></a>
<h3 id="u65B9_u6CD5_u4E00_uFF1A_u4F7F_u7528_u6570_u7EC4_u6307_u9488"><a href="#u65B9_u6CD5_u4E00_uFF1A_u4F7F_u7528_u6570_u7EC4_u6307_u9488" class="headerlink" title="方法一：使用数组指针"></a>方法一：使用数组指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">char</span> a,b,c;</span><br><span class="line">	<span class="comment">//申请空间 </span></span><br><span class="line">	<span class="comment">//使用数组指针，分配一个指针数组，将其首地址保存在x </span></span><br><span class="line">	<span class="keyword">char</span> **x = <span class="keyword">new</span> <span class="keyword">char</span>*[num];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		<span class="comment">//然后再为指针数组的每个元素分配一个数组</span></span><br><span class="line">		x[i]=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];</span><br><span class="line">		x[i][<span class="number">0</span>] = a; x[i][<span class="number">1</span>] = b; x[i][<span class="number">2</span>] = c;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//传递数组参数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; num;j++)&#123;  </span><br><span class="line">        <span class="comment">//sort(x[j]);</span></span><br><span class="line">        sort(x[j],x[j]+<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt; <span class="number">3</span>;k++)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x[j][k]&lt;&lt;<span class="string">" "</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放空间</span></span><br><span class="line">    <span class="comment">//该方法定义的动态二维数组的释放</span></span><br><span class="line">	<span class="comment">//需先释放指针数组的每个元素指向的数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num;i++)&#123;  </span><br><span class="line">        <span class="keyword">delete</span> x[i];  </span><br><span class="line">        x[i] = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后再释放该指针数组</span></span><br><span class="line">    <span class="keyword">delete</span> []x;</span><br><span class="line">    x = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;num;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u65B9_u6CD5_u4E8C_uFF1A_u4F7F_u7528Vector"><a href="#u65B9_u6CD5_u4E8C_uFF1A_u4F7F_u7528Vector" class="headerlink" title="方法二：使用Vector"></a>方法二：使用Vector</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">char</span> a,b,c;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="comment">//申请空间 </span></span><br><span class="line">	<span class="comment">//Vectors 包含着一系列连续存储的元素,其行为和数组类似。</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; x(num,<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;(<span class="number">3</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		x[i][<span class="number">0</span>] = a;</span><br><span class="line">		x[i][<span class="number">1</span>] = b;</span><br><span class="line">		x[i][<span class="number">2</span>] = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; num;j++)&#123;</span><br><span class="line">        sort(x[j].begin(),x[j].end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt; <span class="number">3</span>;k++)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x[j][k]&lt;&lt;<span class="string">" "</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<ol>
<li><a href="http://www.cnblogs.com/li-peng/p/4116349.html" title="详解c++指针的指针和指针的引用" target="_blank" rel="external">详解C++指针的指针和指针的引用</a></li>
<li><a href="http://blog.csdn.net/longshengguoji/article/details/11131365" title="C++建立动态二维数组" target="_blank" rel="external">C++建立动态二维数组</a></li>
<li><a href="http://blog.csdn.net/hongjiqin/article/details/5739935" title="C++给函数传数组参数" target="_blank" rel="external">C++给函数传数组参数</a></li>
<li><a href="http://blog.csdn.net/ajioy/article/details/6976945" title="c++中sort&#40;&#41;及qsort&#40;&#41;的用法总结" target="_blank" rel="external">C++中sort()及qsort()的用法总结</a></li>
</ol>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>以前用惯了java和php之类的编程语言，但蓝桥杯却报了C/C++组……，只能重新以此方式熟悉C++语言特性与算法了。</p>
</blockquote>
<p><strong>描述</strong></p>
<p>输入三个字符（可以重复）后，按各字符的ASCII码从小到大的顺序输出这三个字符。</p>
<p><strong>输入</strong></p>
<p>第一行输入一个数N,表示有N组测试数据。后面的N行输入多组数据，每组输入数据都是占一行，有三个字符组成，之间无空格。</p>
<p><strong>输出</strong></p>
<p>对于每组输入数据，输出一行，字符中间用一个空格分开。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>qwe<br>asd</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>e q w<br>a d s</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=4">http://acm.nyist.net/JudgeOnline/problem.php?pid=4</a></p>]]>
    
    </summary>
    
      <category term="ACM" scheme="http://www.gcusky.com/tags/ACM/"/>
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[test-of-latex【机器学习week1-2】]]></title>
    <link href="http://www.gcusky.com/2016/02/05/test-of-latex/"/>
    <id>http://www.gcusky.com/2016/02/05/test-of-latex/</id>
    <published>2016-02-05T03:53:06.000Z</published>
    <updated>2016-03-14T02:25:48.645Z</updated>
    <content type="html"><![CDATA[<h1 id="u5355_u53D8_u91CF_u7EBF_u6027_u56DE_u5F52_28Linear_Regression_with_One_Variable_29"><a href="#u5355_u53D8_u91CF_u7EBF_u6027_u56DE_u5F52_28Linear_Regression_with_One_Variable_29" class="headerlink" title="单变量线性回归(Linear Regression with One Variable)"></a>单变量线性回归(Linear Regression with One Variable)</h1><p><code>本文为机器学习部分笔记，含大量公式，用于Latex测试</code><br><a id="more"></a></p>
<h2 id="u6A21_u578B_u8868_u8FBE_uFF08Model_Representation_uFF09"><a href="#u6A21_u578B_u8868_u8FBE_uFF08Model_Representation_uFF09" class="headerlink" title="模型表达（Model Representation）"></a>模型表达（Model Representation）</h2><p>以之前的房屋交易问题为例，假使我们回归问题的训练集（Training Set）如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$Size$ $in$ $feet^2(x)$</th>
<th style="text-align:center">$Price(\$)$ $in$ $1000’s(y)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2104</td>
<td style="text-align:center">460</td>
</tr>
<tr>
<td style="text-align:center">1416</td>
<td style="text-align:center">232</td>
</tr>
<tr>
<td style="text-align:center">1534</td>
<td style="text-align:center">315</td>
</tr>
<tr>
<td style="text-align:center">852</td>
<td style="text-align:center">178</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
</tbody>
</table>
<blockquote>
<p>我们将要用来描述这个回归问题的标记如下:</p>
<ul>
<li>$m$ 代表训练集中实例的数量</li>
<li>$x$ 代表特征/输入变量</li>
<li>$y$ 代表目标变量/输出变量</li>
<li>$(x,y)$ 代表训练集中的实例</li>
<li>$(x^{(i)},y^{(i)})$ 代表第 i 个观察实例</li>
<li>$h$ 代表学习算法的解决方案或函数也称为假设（hypothesis）</li>
</ul>
</blockquote>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_9.png?imageView/2/w/450" alt=""></p>
<p>　　因而，要解决房价预测问题，我们实际上是要将训练集“喂”给我们的学习算法，进而学习得一个假设 $h$，然后将我们要预测的房屋的尺寸作为输入变量输入给 $h$，预测出该房屋的交易价格作为输出变量输出为结果。那么，对于我们的房价预测问题，我们该如何表达 $h$ ？<br>　　一种可能的表达方式为：$h_θ=θ_0+θ_1x$；因为只含有一个特征/输入变量，因此这样的问题叫作<strong>单变量线性回归问题</strong>。</p>
<h2 id="u4EE3_u4EF7_u51FD_u6570_uFF08Cost_Function_uFF09"><a href="#u4EE3_u4EF7_u51FD_u6570_uFF08Cost_Function_uFF09" class="headerlink" title="代价函数（Cost Function）"></a>代价函数（Cost Function）</h2><table>
<thead>
<tr>
<th style="text-align:center">Hypothesis:</th>
<th style="text-align:center">$h_θ=θ_0+θ_1x$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Parameters:</td>
<td style="text-align:center">$θ_0$, $θ_0$</td>
</tr>
<tr>
<td style="text-align:center"><strong>Cost Function:</strong></td>
<td style="text-align:center">$$J(θ_0,θ_1)=\frac{1}{2m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})^2$$</td>
</tr>
<tr>
<td style="text-align:center">Goal:</td>
<td style="text-align:center">$\mathop{minimize} \limits_{θ_0,θ_1}J(θ_0,θ_1)$</td>
</tr>
</tbody>
</table>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_10.png?imageView/2/w/450" alt=""></p>
<p>　　我们现在要做的便是为我们的模型选择合适的参数（parameters）$θ_0$和 $θ_1$，在房价问题这个例子中便是直线的斜率和在 $y$ 轴上的截距。<br>　　我们选择的参数决定了我们得到的直线相对于我们的训练集的准确程度，模型所预测的值与训练集中实际值之间的差距就是<strong>建模误差（modeling error）</strong>。<br>　　我们的目标便是选择出可以使得建模误差的平方和能够最小的模型参数。<br>　　即使得代价函数$J(θ_0,θ_1)=\frac{1}{2m}\sum^m_{i=1}(h_θ(x^{(i)})-y^{(i)})^2$最小。接下来我们绘制一个等高线图， $(x,y,z)$ 三个坐标分别为 $θ_0$ 和 $θ_1$和 $J(θ_0,θ_1)$：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_11.png?imageView/2/w/500" alt=""></p>
<p>　　则可以看出在三维空间中存在一个使得 $J(θ_0,θ_1)$ 最小的点。</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_12.png?imageView/2/w/700" alt="其中一种拟合情况"></p>
<h2 id="u68AF_u5EA6_u4E0B_u964D_uFF08Gradient_Descent_uFF09"><a href="#u68AF_u5EA6_u4E0B_u964D_uFF08Gradient_Descent_uFF09" class="headerlink" title="梯度下降（Gradient Descent）"></a>梯度下降（Gradient Descent）</h2><h3 id="u57FA_u672C_u601D_u60F3"><a href="#u57FA_u672C_u601D_u60F3" class="headerlink" title="基本思想"></a>基本思想</h3><p>　　开始时我们随机选择一个参数的组合$（θ_0,θ_1,…,θ_n）$，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合。 我们持续这么做直到到到一个<strong>局部最小值（local minimum）</strong>,因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是<strong>全局最小值（global minimum）</strong>,选择不同的初始参数组合，可能会找到不同的局部最小值（如下图）。</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_13.png?imageView/2/w/700" alt=""><br><img src="http://cloud.gcusky.com/MLMOOC/ML1_15.png" alt=""></p>
<h2 id="u5BF9_u7EBF_u6027_u56DE_u5F52_u8FD0_u7528_u68AF_u5EA6_u4E0B_u964D_u6CD5"><a href="#u5BF9_u7EBF_u6027_u56DE_u5F52_u8FD0_u7528_u68AF_u5EA6_u4E0B_u964D_u6CD5" class="headerlink" title="对线性回归运用梯度下降法"></a>对线性回归运用梯度下降法</h2><h3 id="u68AF_u5EA6_u4E0B_u964D_u7684_u76F4_u89C2_u7406_u89E3"><a href="#u68AF_u5EA6_u4E0B_u964D_u7684_u76F4_u89C2_u7406_u89E3" class="headerlink" title="梯度下降的直观理解"></a>梯度下降的直观理解</h3><blockquote>
<p>梯度下降是一个用来求函数最小值的算法，我们将使用梯度下降算法来求出代价函数 $J(θ_0,θ_1)$ 的最小值。</p>
</blockquote>
<p>　　梯度下降算法：$θ_j:=θ_j-α\frac{\partial}{\partialθ_j}J(θ_0,θ_1)$<br>　　对 $θ$ 赋值，使得 $J(θ)$ 按梯度下降最快方向进行，一直迭代下去，最终得到局部最小值。其中 $α$ 是<strong>学习率（learning rate）</strong>，它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大。<strong>注意：计算时 $θ_0$ 和 $θ_1$ 要同步更新（simultaneous update）。</strong></p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_14.png?imageView/2/w/600" alt=""></p>
<h3 id="u68AF_u5EA6_u4E0B_u964D_u7684_u7EBF_u6027_u56DE_u5F52"><a href="#u68AF_u5EA6_u4E0B_u964D_u7684_u7EBF_u6027_u56DE_u5F52" class="headerlink" title="梯度下降的线性回归"></a>梯度下降的线性回归</h3><p>　　梯度下降算法和线性回归算法比较如图：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_16.png?imageView/2/w/600" alt=""></p>
<p>　　对我们之前的线性回归问题运用梯度下降法，关键在于求出代价函数的导数，即：</p>
<p>$\frac{\partial}{\partialθ_j}J(θ_0,θ_1)=\frac{\partial}{\partialθ_j}\frac{1}{2m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})^2$<br>　　$j=0$ 时：$\frac{\partial}{\partialθ_0}J(θ_0,θ_1)=\frac{1}{m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})$<br>　　$j=1$ 时：$\frac{\partial}{\partialθ_1}J(θ_0,θ_1)=\frac{1}{m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})·x^{(i)}$</p>
<p>　　则算法改写成：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_17.png?imageView/2/w/600" alt=""></p>
<p>　　拟合情况：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_18.png" alt=""><br><img src="http://cloud.gcusky.com/MLMOOC/ML1_19.png" alt=""><br><img src="http://cloud.gcusky.com/MLMOOC/ML1_20.png" alt=""></p>
<p>　　<br>参考资料<br><a href="http://mooc.guokr.com/note/12/" title="MOOC学院" target="_blank" rel="external">机器学习课笔记 —— Ryan Cheung</a><br><a href="http://mooc.guokr.com/note/16274/" title="MOOC学院" target="_blank" rel="external">机器学习教程个人笔记（V2.5）—— 黄海广</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5355_u53D8_u91CF_u7EBF_u6027_u56DE_u5F52_28Linear_Regression_with_One_Variable_29"><a href="#u5355_u53D8_u91CF_u7EBF_u6027_u56DE_u5F52_28Linear_Regression_with_One_Variable_29" class="headerlink" title="单变量线性回归(Linear Regression with One Variable)"></a>单变量线性回归(Linear Regression with One Variable)</h1><p><code>本文为机器学习部分笔记，含大量公式，用于Latex测试</code><br>]]>
    
    </summary>
    
      <category term="machinelearning" scheme="http://www.gcusky.com/tags/machinelearning/"/>
    
      <category term="test" scheme="http://www.gcusky.com/categories/test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://www.gcusky.com/2016/02/02/hello-world/"/>
    <id>http://www.gcusky.com/2016/02/02/hello-world/</id>
    <published>2016-02-02T14:19:35.760Z</published>
    <updated>2016-02-02T14:19:35.706Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 基本配置]]></title>
    <link href="http://www.gcusky.com/2016/02/02/learn-hexo/"/>
    <id>http://www.gcusky.com/2016/02/02/learn-hexo/</id>
    <published>2016-02-02T14:10:24.000Z</published>
    <updated>2016-02-03T07:25:06.036Z</updated>
    <content type="html"><![CDATA[<h2 id="Hexo_u5168_u5C40_u57FA_u7840_u914D_u7F6E"><a href="#Hexo_u5168_u5C40_u57FA_u7840_u914D_u7F6E" class="headerlink" title="Hexo全局基础配置"></a>Hexo全局基础配置</h2><blockquote>
<p>用文本编辑器修改 _config.yml 这个文件，大致如下，只需要自动修改几个其他保持默认即可。<br>通常需要修改站点名称/URL 格式/归档设置/Disqus 评论用户名/部署配置，这几项就可以了，注意冒号后面都要添加一个半角空格，之后才是设置参数。<br>自定义域名设置在 source 文件夹下面新建 CNAME 文件，里面写入你的自定义域名，并设置你的 dns 配置 cname 方式到服务器供应商给出的地址即可。</p>
</blockquote>
<a id="more"></a>
<h3 id="u7F51_u7AD9_Site"><a href="#u7F51_u7AD9_Site" class="headerlink" title="网站 Site"></a>网站 Site</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>网站标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td>description</td>
<td>网站描述</td>
</tr>
<tr>
<td>author</td>
<td>你的名字</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言</td>
</tr>
<tr>
<td>timezone</td>
<td>网站时区，Hexo 预设使用你电脑的时区，时区列表。</td>
</tr>
</tbody>
</table>
<h3 id="u7F51_u5740_URL"><a href="#u7F51_u5740_URL" class="headerlink" title="网址 URL"></a>网址 URL</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>网址</td>
<td><a href="http://yoursite.com/" target="_blank" rel="external">http://yoursite.com/</a></td>
</tr>
<tr>
<td>root</td>
<td>网站根目录</td>
<td>/</td>
</tr>
<tr>
<td>permalink</td>
<td>文章的永久链接格式</td>
<td>：year/:month/:day/:title/</td>
</tr>
<tr>
<td>permalink_default</td>
<td>永久连接中各部分的默认值</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>网站存放在子目录</strong><br>如果你的网站存放在子目录中，例如 <a href="http://yoursite.com/blog" target="_blank" rel="external">http://yoursite.com/blog</a> ，则请将 url 设为 <a href="http://yoursite/blog" target="_blank" rel="external">http://yoursite/blog</a> 并把 root 设为 /blog/。</p>
</blockquote>
<h3 id="u76EE_u5F55_Directory"><a href="#u76EE_u5F55_Directory" class="headerlink" title="目录 Directory"></a>目录 Directory</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>source_dir</td>
<td>资源文件夹，这个文件夹用来存放内容</td>
<td>source</td>
</tr>
<tr>
<td>public_dir</td>
<td>公共文件夹，这个文件夹用于存放生成的站点文件</td>
<td>public</td>
</tr>
<tr>
<td>tag_dir</td>
<td>标签文件夹</td>
<td>tags</td>
</tr>
<tr>
<td>archive_dir</td>
<td>归档文件夹</td>
<td>archives</td>
</tr>
<tr>
<td>category_dir</td>
<td>分类文件夹</td>
<td>categories</td>
</tr>
<tr>
<td>code_dir</td>
<td>Incloud code 文件夹</td>
<td>downloads/code</td>
</tr>
<tr>
<td>i18n_dir</td>
<td>国际化（i18n）文件夹</td>
<td>lang</td>
</tr>
<tr>
<td>skip_render</td>
<td>跳过制定文件的渲染，你可以使用 glob 来配置路径。</td>
</tr>
</tbody>
</table>
<h3 id="u6587_u7AE0_Writing"><a href="#u6587_u7AE0_Writing" class="headerlink" title="文章 Writing"></a>文章 Writing</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>new_post_name</td>
<td>新文章的文件名称为</td>
<td>title.md</td>
</tr>
<tr>
<td>default_layout</td>
<td>预设布局</td>
<td>post</td>
</tr>
<tr>
<td>auto_spacing</td>
<td>在中文和英文之间加入空格</td>
<td>false</td>
</tr>
<tr>
<td>titlecase</td>
<td>把标题转化为 title case</td>
<td>false</td>
</tr>
<tr>
<td>external_link</td>
<td>在新建标签中打开链接</td>
<td>true</td>
</tr>
<tr>
<td>filename_case</td>
<td>把文件名称转换为（1）小写或（2）大写</td>
<td>0</td>
</tr>
<tr>
<td>render_drafts</td>
<td>显示草稿</td>
<td>false</td>
</tr>
<tr>
<td>post_asset_folder</td>
<td>启动 Asset 文件夹</td>
<td>false</td>
</tr>
<tr>
<td>relative_link</td>
<td>把链接改为与根目录相对的位置</td>
<td>false</td>
</tr>
<tr>
<td>future</td>
<td>显示未来的文章标题</td>
<td>ture</td>
</tr>
<tr>
<td>highlight</td>
<td>代码块的设置</td>
</tr>
</tbody>
</table>
<h3 id="u5206_u7C7B_26amp_3B_u6807_u7B7E_Category__26amp_3B_Tag"><a href="#u5206_u7C7B_26amp_3B_u6807_u7B7E_Category__26amp_3B_Tag" class="headerlink" title="分类&amp;标签 Category &amp; Tag"></a>分类&amp;标签 Category &amp; Tag</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>default_category</td>
<td>默认分类</td>
<td>uncategoried</td>
</tr>
<tr>
<td>category_map</td>
<td>分类别名</td>
<td></td>
</tr>
<tr>
<td>tap_map</td>
<td>标签名称</td>
</tr>
</tbody>
</table>
<h3 id="u65E5_u671F/_u65F6_u95F4_u683C_u5F0F_Date_/_Time_format"><a href="#u65E5_u671F/_u65F6_u95F4_u683C_u5F0F_Date_/_Time_format" class="headerlink" title="日期/时间格式 Date / Time format"></a>日期/时间格式 Date / Time format</h3><p>Hexo 使用 Moment.js 来解析和显示时间。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>date_format</td>
<td>日期格式</td>
<td>MMM D YYYY</td>
</tr>
<tr>
<td>time_format</td>
<td>时间格式</td>
<td>H:mm:ss</td>
</tr>
</tbody>
</table>
<h3 id="u5206_u9875_Pagination"><a href="#u5206_u9875_Pagination" class="headerlink" title="分页 Pagination"></a>分页 Pagination</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>per_page</td>
<td>每页显示的文章量（0=关闭分页功能）</td>
<td>10</td>
</tr>
<tr>
<td>pagination_dir</td>
<td>分页目录</td>
<td>page</td>
</tr>
</tbody>
</table>
<h3 id="u6269_u5C55_u4E0E_u90E8_u7F72_Extensions_/_Deployment"><a href="#u6269_u5C55_u4E0E_u90E8_u7F72_Extensions_/_Deployment" class="headerlink" title="扩展与部署 Extensions / Deployment"></a>扩展与部署 Extensions / Deployment</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>theme</td>
<td>当前主标题名称</td>
</tr>
<tr>
<td>deploy</td>
<td>部署</td>
</tr>
</tbody>
</table>
<h2 id="github_u548Cgitcafe_u591A_u90E8_u7F72"><a href="#github_u548Cgitcafe_u591A_u90E8_u7F72" class="headerlink" title="github和gitcafe多部署"></a>github和gitcafe多部署</h2><h3 id="u4FEE_u6539_config-yml_u7684deploy"><a href="#u4FEE_u6539_config-yml_u7684deploy" class="headerlink" title="修改_config.yml的deploy"></a>修改_config.yml的deploy</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: update  #<span class="id">#git</span> message 建议默认字段 update 可以自定义</span><br><span class="line">  repo: </span><br><span class="line">  gitcafe: &lt;repository url&gt;,[branch] #<span class="id">#gitcafe</span> 仓库地址和分支</span><br><span class="line">  github: &lt;repository url&gt;,[branch] #<span class="id">#github</span> 仓库地址和分支</span><br></pre></td></tr></table></figure>
<blockquote>
<p>repository url 都使用SSH链接可免密码操作</p>
</blockquote>
<h3 id="u5206_u522B_u5728_github__u548C_gitcafe__u521B_u5EFA_u9879_u76EE"><a href="#u5206_u522B_u5728_github__u548C_gitcafe__u521B_u5EFA_u9879_u76EE" class="headerlink" title="分别在 github 和 gitcafe 创建项目"></a>分别在 github 和 gitcafe 创建项目</h3><p>生成.ssh，添加到</p>
<blockquote>
<p>GitHub -&gt; settings -&gt; SSH keys<br>GitCafe -&gt; 账户设置 -&gt; SSH公匙管理</p>
</blockquote>
<p>创建一个与用户名(如果是组织，就是组织名)相同名称的项目<br>【github 项目名要加上 <code>.github.io</code>】</p>
<blockquote>
<p>GitHub Pages 服务分支在 master<br>GitCafe Pages 服务分支在 gitcafe-pages</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="literal">d</span></span><br></pre></td></tr></table></figure>
<h3 id="u57DF_u540D_u7ED1_u5B9A"><a href="#u57DF_u540D_u7ED1_u5B9A" class="headerlink" title="域名绑定"></a>域名绑定</h3><ol>
<li>在source文件夹里创建CNAME文件，里面添加你的域名信息：yoursite.com（注意前面不添加http://）</li>
<li>域名解析网站，添加域名，添加记录【国内解析到 GitCafe ，默认解析到 GitHub 】<br><img src="http://cloud.gcusky.com/hexo/domain.png" alt="domain"></li>
</ol>
<blockquote>
<p>GitHub 解析到 <code>项目名.github.io</code><br>GitCafe 解析到 <code>gitcafe.io</code>【GitCafe还要根据 <code>相关链接2</code> 设置自定义域名】</p>
</blockquote>
<h2 id="u95EE_u9898_u89E3_u51B3"><a href="#u95EE_u9898_u89E3_u51B3" class="headerlink" title="问题解决"></a>问题解决</h2><ul>
<li><code>hexo d</code> 部署提示找不到git，<code>hexo s</code> 执行hexo server提示找不到该指令 </li>
<li>在Hexo 3.0版本后 <code>deploy git</code>、 <code>hexo server</code> 被分开，需先进行安装：<code>npm install hexo-deployer-git --save</code> <code>npm install hexo-server --save</code></li>
</ul>
<h2 id="u76F8_u5173_u94FE_u63A5"><a href="#u76F8_u5173_u94FE_u63A5" class="headerlink" title="相关链接"></a>相关链接</h2><ol>
<li>Git教程 - 廖雪峰的官方网站 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li>
<li>gitcafe Pages 相关帮助 <a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9" target="_blank" rel="external">https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9</a></li>
<li>Hexo 3.0 静态博客使用指南  <a href="https://help.gitcafe.com/practices/hexo" target="_blank" rel="external">https://help.gitcafe.com/practices/hexo</a></li>
<li>zipperar的hexo相关教程 <a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">http://zipperary.com/categories/hexo/</a></li>
<li>Hexo 搭建博客-基础配置篇 <a href="http://www.jianshu.com/p/df3edc4286d2" target="_blank" rel="external">http://www.jianshu.com/p/df3edc4286d2</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Hexo_u5168_u5C40_u57FA_u7840_u914D_u7F6E"><a href="#Hexo_u5168_u5C40_u57FA_u7840_u914D_u7F6E" class="headerlink" title="Hexo全局基础配置"></a>Hexo全局基础配置</h2><blockquote>
<p>用文本编辑器修改 _config.yml 这个文件，大致如下，只需要自动修改几个其他保持默认即可。<br>通常需要修改站点名称/URL 格式/归档设置/Disqus 评论用户名/部署配置，这几项就可以了，注意冒号后面都要添加一个半角空格，之后才是设置参数。<br>自定义域名设置在 source 文件夹下面新建 CNAME 文件，里面写入你的自定义域名，并设置你的 dns 配置 cname 方式到服务器供应商给出的地址即可。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://www.gcusky.com/tags/hexo/"/>
    
      <category term="hexo" scheme="http://www.gcusky.com/categories/hexo/"/>
    
  </entry>
  
</feed>
